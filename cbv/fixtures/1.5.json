[
{
 "fields": {
  "project": [
   "Django"
  ],
  "version_number": "1.5"
 },
 "model": "cbv.projectversion",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic",
  "filename": "/django/views/generic/__init__.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic.base",
  "filename": "/django/views/generic/base.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic.dates",
  "filename": "/django/views/generic/dates.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic.detail",
  "filename": "/django/views/generic/detail.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic.edit",
  "filename": "/django/views/generic/edit.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.views.generic.list",
  "filename": "/django/views/generic/list.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "project_version": [
   "Django",
   "1.5"
  ],
  "docstring": "",
  "name": "django.contrib.formtools.wizard.views",
  "filename": "/django/contrib/formtools/wizard/views.py"
 },
 "model": "cbv.module",
 "pk": null
},
{
 "fields": {
  "value": "<logging.Logger object at 0x7effadfe3810>",
  "name": "logger",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "value": "<django.conf.LazySettings object at 0x7effae683510>",
  "name": "settings",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "name": "unicode_literals",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "name": "unicode_literals",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "name": "unicode_literals",
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "name": "unicode_literals",
  "module": [
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "line_number": -1
 },
 "model": "cbv.moduleattribute",
 "pk": null
},
{
 "fields": {
  "line_number": 668,
  "code": "def _date_from_string(year, year_format, month='', month_format='', day='', day_format='', delim='__'):\n    \"\"\"\n    Helper: get a datetime.date object given a format string and a year,\n    month, and day (only year is mandatory). Raise a 404 for an invalid date.\n    \"\"\"\n    format = delim.join((year_format, month_format, day_format))\n    datestr = delim.join((year, month, day))\n    try:\n        return datetime.datetime.strptime(datestr, format).date()\n    except ValueError:\n        raise Http404(_(\"Invalid date string '%(datestr)s' given format '%(format)s'\") % {\n            'datestr': datestr,\n            'format': format,\n        })\n",
  "name": "_date_from_string",
  "docstring": "Helper: get a datetime.date object given a format string and a year,\nmonth, and day (only year is mandatory). Raise a 404 for an invalid date.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "year, year_format, month=u'', month_format=u'', day=u'', day_format=u'', delim=u'__'"
 },
 "model": "cbv.function",
 "pk": null
},
{
 "fields": {
  "line_number": 684,
  "code": "def _get_next_prev(generic_view, date, is_previous, period):\n    \"\"\"\n    Helper: Get the next or the previous valid date. The idea is to allow\n    links on month/day views to never be 404s by never providing a date\n    that'll be invalid for the given view.\n\n    This is a bit complicated since it handles different intervals of time,\n    hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day/week/month,\n          reguardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive result\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n\n    \"\"\"\n    date_field = generic_view.get_date_field()\n    allow_empty = generic_view.get_allow_empty()\n    allow_future = generic_view.get_allow_future()\n\n    get_current = getattr(generic_view, '_get_current_%s' % period)\n    get_next = getattr(generic_view, '_get_next_%s' % period)\n\n    # Bounds of the current interval\n    start, end = get_current(date), get_next(date)\n\n    # If allow_empty is True, the naive result will be valid\n    if allow_empty:\n        if is_previous:\n            result = get_current(start - datetime.timedelta(days=1))\n        else:\n            result = end\n\n        if allow_future or result <= timezone_today():\n            return result\n        else:\n            return None\n\n    # Otherwise, we'll need to go to the database to look for an object\n    # whose date_field is at least (greater than/less than) the given\n    # naive result\n    else:\n        # Construct a lookup and an ordering depending on whether we're doing\n        # a previous date or a next date lookup.\n        if is_previous:\n            lookup = {'%s__lt' % date_field: generic_view._make_date_lookup_arg(start)}\n            ordering = '-%s' % date_field\n        else:\n            lookup = {'%s__gte' % date_field: generic_view._make_date_lookup_arg(end)}\n            ordering = date_field\n\n        # Filter out objects in the future if appropriate.\n        if not allow_future:\n            # Fortunately, to match the implementation of allow_future,\n            # we need __lte, which doesn't conflict with __lt above.\n            if generic_view.uses_datetime_field:\n                now = timezone.now()\n            else:\n                now = timezone_today()\n            lookup['%s__lte' % date_field] = now\n\n        qs = generic_view.get_queryset().filter(**lookup).order_by(ordering)\n\n        # Snag the first object from the queryset; if it doesn't exist that\n        # means there's no next/previous link available.\n        try:\n            result = getattr(qs[0], date_field)\n        except IndexError:\n            return None\n\n        # Convert datetimes to dates in the current time zone.\n        if generic_view.uses_datetime_field:\n            if settings.USE_TZ:\n                result = timezone.localtime(result)\n            result = result.date()\n\n        # Return the first day of the period.\n        return get_current(result)\n",
  "name": "_get_next_prev",
  "docstring": "Helper: Get the next or the previous valid date. The idea is to allow\nlinks on month/day views to never be 404s by never providing a date\nthat'll be invalid for the given view.\n\nThis is a bit complicated since it handles different intervals of time,\nhence the coupling to generic_view.\n\nHowever in essence the logic comes down to:\n\n    * If allow_empty and allow_future are both true, this is easy: just\n      return the naive result (just the next/previous day/week/month,\n      reguardless of object existence.)\n\n    * If allow_empty is true, allow_future is false, and the naive result\n      isn't in the future, then return it; otherwise return None.\n\n    * If allow_empty is false and allow_future is true, return the next\n      date *that contains a valid object*, even if it's in the future. If\n      there are no next objects, return None.\n\n    * If allow_empty is false and allow_future is false, return the next\n      date that contains a valid object. If that date is in the future, or\n      if there are no next objects, return None.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "generic_view, date, is_previous, period"
 },
 "model": "cbv.function",
 "pk": null
},
{
 "fields": {
  "line_number": 17,
  "code": "def normalize_name(name):\n    \"\"\"\n    Converts camel-case style names into underscore seperated words. Example::\n\n        >>> normalize_name('oneTwoThree')\n        'one_two_three'\n        >>> normalize_name('FourFiveSix')\n        'four_five_six'\n\n    \"\"\"\n    new = re.sub('(((?<=[a-z])[A-Z])|([A-Z](?![A-Z]|$)))', '_\\\\1', name)\n    return new.lower().strip('_')\n",
  "name": "normalize_name",
  "docstring": "Converts camel-case style names into underscore seperated words. Example::\n\n    >>> normalize_name('oneTwoThree')\n    'one_two_three'\n    >>> normalize_name('FourFiveSix')\n    'four_five_six'",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "name"
 },
 "model": "cbv.function",
 "pk": null
},
{
 "fields": {
  "line_number": 775,
  "code": "def timezone_today():\n    \"\"\"\n    Return the current date in the current time zone.\n    \"\"\"\n    if settings.USE_TZ:\n        return timezone.localtime(timezone.now()).date()\n    else:\n        return datetime.date.today()\n",
  "name": "timezone_today",
  "docstring": "Return the current date in the current time zone.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": ""
 },
 "model": "cbv.function",
 "pk": null
},
{
 "fields": {
  "line_number": 568,
  "name": "CookieWizardView",
  "docs_url": "",
  "docstring": "A WizardView with pre-configured CookieStorage backend.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 702,
  "name": "NamedUrlCookieWizardView",
  "docs_url": "",
  "docstring": "A NamedUrlFormWizard with pre-configured CookieStorageBackend.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 695,
  "name": "NamedUrlSessionWizardView",
  "docs_url": "",
  "docstring": "A NamedUrlWizardView with pre-configured SessionStorage backend.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 575,
  "name": "NamedUrlWizardView",
  "docs_url": "",
  "docstring": "A WizardView with URL named steps support.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 561,
  "name": "SessionWizardView",
  "docs_url": "",
  "docstring": "A WizardView with pre-configured SessionStorage backend.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 30,
  "name": "StepsHelper",
  "docs_url": "",
  "docstring": "",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 96,
  "name": "WizardView",
  "docs_url": "",
  "docstring": "The WizardView is used to create multi-page forms and handles all the\nstorage and validation stuff. The wizard is based on Django's generic\nclass based views.",
  "module": [
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "import_path": "django.contrib.formtools.wizard.views"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 10,
  "name": "GenericViewError",
  "docs_url": "",
  "docstring": "A problem in a generic view.",
  "module": [
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 15,
  "name": "ContextMixin",
  "docs_url": "",
  "docstring": "A default context mixin that passes the keyword arguments received by\nget_context_data as the template context.",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.base"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 157,
  "name": "RedirectView",
  "docs_url": "",
  "docstring": "A view that provides a redirect on any GET request.",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 110,
  "name": "TemplateResponseMixin",
  "docs_url": "",
  "docstring": "A mixin that can be used to render a template.",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.base"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 147,
  "name": "TemplateView",
  "docs_url": "",
  "docstring": "A view that renders a template.  This view will also pass into the context\nany keyword arguments passed by the url conf.",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 27,
  "name": "View",
  "docs_url": "",
  "docstring": "Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.",
  "module": [
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 420,
  "name": "ArchiveIndexView",
  "docs_url": "",
  "docstring": "Top-level archive of date-based items.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 399,
  "name": "BaseArchiveIndexView",
  "docs_url": "",
  "docstring": "Base class for archives of date-based items.\n\nRequires a response mixin.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 626,
  "name": "BaseDateDetailView",
  "docs_url": "",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 325,
  "name": "BaseDateListView",
  "docs_url": "",
  "docstring": "Abstract base class for date-based views displaying a list of objects.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 565,
  "name": "BaseDayArchiveView",
  "docs_url": "",
  "docstring": "List of objects published on a given day.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 479,
  "name": "BaseMonthArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given year.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 607,
  "name": "BaseTodayArchiveView",
  "docs_url": "",
  "docstring": "List of objects published today.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 520,
  "name": "BaseWeekArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given week.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 427,
  "name": "BaseYearArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given year.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 660,
  "name": "DateDetailView",
  "docs_url": "",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 257,
  "name": "DateMixin",
  "docs_url": "",
  "docstring": "Mixin class for views manipulating date-based data.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 600,
  "name": "DayArchiveView",
  "docs_url": "",
  "docstring": "List of objects published on a given day.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 131,
  "name": "DayMixin",
  "docs_url": "",
  "docstring": "Mixin for views manipulating day-based data.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 513,
  "name": "MonthArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given year.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 72,
  "name": "MonthMixin",
  "docs_url": "",
  "docstring": "Mixin for views manipulating month-based data.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 619,
  "name": "TodayArchiveView",
  "docs_url": "",
  "docstring": "List of objects published today.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 558,
  "name": "WeekArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given week.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 187,
  "name": "WeekMixin",
  "docs_url": "",
  "docstring": "Mixin for views manipulating week-based data.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 472,
  "name": "YearArchiveView",
  "docs_url": "",
  "docstring": "List of objects published in a given year.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 16,
  "name": "YearMixin",
  "docs_url": "",
  "docstring": "Mixin for views manipulating year-based data.",
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.dates"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 103,
  "name": "BaseDetailView",
  "docs_url": "",
  "docstring": "A base view for displaying a single object",
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.detail"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 159,
  "name": "DetailView",
  "docs_url": "",
  "docstring": "Render a \"detail\" view of an object.\n\nBy default this is a model instance looked up from `self.queryset`, but the\nview will support display of *any* object by overriding `self.get_object()`.",
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 10,
  "name": "SingleObjectMixin",
  "docs_url": "",
  "docstring": "Provides the ability to retrieve a single object for further manipulation.",
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.detail"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 113,
  "name": "SingleObjectTemplateResponseMixin",
  "docs_url": "",
  "docstring": "",
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.detail"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 187,
  "name": "BaseCreateView",
  "docs_url": "",
  "docstring": "Base view for creating an new object instance.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 260,
  "name": "BaseDeleteView",
  "docs_url": "",
  "docstring": "Base view for deleting an object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 175,
  "name": "BaseFormView",
  "docs_url": "",
  "docstring": "A base view for displaying a form",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 210,
  "name": "BaseUpdateView",
  "docs_url": "",
  "docstring": "Base view for updating an existing object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 202,
  "name": "CreateView",
  "docs_url": "",
  "docstring": "View for creating a new object instance,\nwith a response rendered by template.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 268,
  "name": "DeleteView",
  "docs_url": "",
  "docstring": "View for deleting an object retrieved with `self.get_object()`,\nwith a response rendered by template.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 233,
  "name": "DeletionMixin",
  "docs_url": "",
  "docstring": "A mixin providing the ability to delete objects",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 10,
  "name": "FormMixin",
  "docs_url": "",
  "docstring": "A mixin that provides a way to show and handle a form in a request.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 181,
  "name": "FormView",
  "docs_url": "",
  "docstring": "A view for displaying a form, and rendering a template response.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 75,
  "name": "ModelFormMixin",
  "docs_url": "",
  "docstring": "A mixin that provides a way to show and handle a modelform in a request.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 145,
  "name": "ProcessFormView",
  "docs_url": "",
  "docstring": "A mixin that renders a form on GET and processes it on POST.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.edit"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 225,
  "name": "UpdateView",
  "docs_url": "",
  "docstring": "View for updating an object,\nwith a response rendered by template.",
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 119,
  "name": "BaseListView",
  "docs_url": "",
  "docstring": "A base view for displaying a list of objects.",
  "module": [
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.list"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 172,
  "name": "ListView",
  "docs_url": "",
  "docstring": "Render some list of objects, set by `self.model` or `self.queryset`.\n`self.queryset` can actually be any iterable of items, not just a queryset.",
  "module": [
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 10,
  "name": "MultipleObjectMixin",
  "docs_url": "",
  "docstring": "A mixin for views manipulating multiple objects.",
  "module": [
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.list"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": 143,
  "name": "MultipleObjectTemplateResponseMixin",
  "docs_url": "",
  "docstring": "Mixin for responding with a template and list of objects.",
  "module": [
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "import_path": "django.views.generic.list"
 },
 "model": "cbv.klass",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92470>",
  "name": "all"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "False",
  "name": "allow_empty"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "True",
  "name": "allow_empty"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "False",
  "name": "allow_future"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<attribute 'args' of 'exceptions.BaseException' objects>",
  "name": "args"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "condition_dict"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "content_type"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'latest'",
  "name": "context_object_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "context_object_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "context_object_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92578>",
  "name": "count"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d925d0>",
  "name": "current"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "date_field"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'month'",
  "name": "date_list_period"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'day'",
  "name": "date_list_period"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'year'",
  "name": "date_list_period"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "day"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'%d'",
  "name": "day_format"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__delattr__' of 'exceptions.BaseException' objects>",
  "name": "__delattr__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "done_step_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92628>",
  "name": "first"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "form_class"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "form_list"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__getattribute__' of 'exceptions.BaseException' objects>",
  "name": "__getattribute__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__getitem__' of 'exceptions.BaseException' objects>",
  "name": "__getitem__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__getslice__' of 'exceptions.BaseException' objects>",
  "name": "__getslice__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "[u'get', u'post', u'put', u'delete', u'head', u'options', u'trace']",
  "name": "http_method_names"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92788>",
  "name": "index"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__init__' of 'exceptions.Exception' objects>",
  "name": "__init__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "{}",
  "name": "initial"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "initial_dict"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "instance_dict"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92680>",
  "name": "last"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "False",
  "name": "make_object_list"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<attribute 'message' of 'exceptions.BaseException' objects>",
  "name": "message"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "model"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "model"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "month"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'%b'",
  "name": "month_format"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d926d8>",
  "name": "next"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "'page'",
  "name": "page_kwarg"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "paginate_by"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": 15,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "<class 'django.core.paginator.Paginator'>",
  "name": "paginator_class"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "True",
  "name": "permanent"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "'pk'",
  "name": "pk_url_kwarg"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92730>",
  "name": "prev"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "queryset"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "queryset"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "False",
  "name": "query_string"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<method '__reduce__' of 'exceptions.BaseException' objects>",
  "name": "__reduce__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__repr__' of 'exceptions.BaseException' objects>",
  "name": "__repr__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": 137,
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "<class 'django.template.response.TemplateResponse'>",
  "name": "response_class"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__setattr__' of 'exceptions.BaseException' objects>",
  "name": "__setattr__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<method '__setstate__' of 'exceptions.BaseException' objects>",
  "name": "__setstate__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "'slug'",
  "name": "slug_field"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "'slug'",
  "name": "slug_url_kwarg"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d927e0>",
  "name": "step0"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "<property object at 0x7effa7d92838>",
  "name": "step1"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "NamedUrlSessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "'django.contrib.formtools.wizard.storage.session.SessionStorage'",
  "name": "storage_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "'django.contrib.formtools.wizard.storage.session.SessionStorage'",
  "name": "storage_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "storage_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "CookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
  "name": "storage_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "NamedUrlCookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "'django.contrib.formtools.wizard.storage.cookie.CookieStorage'",
  "name": "storage_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<slot wrapper '__str__' of 'exceptions.BaseException' objects>",
  "name": "__str__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "success_url"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "success_url"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "'formtools/wizard/wizard_form.html'",
  "name": "template_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "template_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "template_name_field"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive_year'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "'_confirm_delete'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "'_form'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "value": "'_list'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "value": "'_detail'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive_day'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive_month'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive_day'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'_archive_week'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "value": "'_form'",
  "name": "template_name_suffix"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.5"
  ],
  "value": "<method '__unicode__' of 'exceptions.BaseException' objects>",
  "name": "__unicode__"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "url"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "url_name"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "week"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'%U'",
  "name": "week_format"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "None",
  "name": "year"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": -1,
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "value": "'%Y'",
  "name": "year_format"
 },
 "model": "cbv.klassattribute",
 "pk": null
},
{
 "fields": {
  "line_number": 106,
  "code": "def _allowed_methods(self):\n    return [m.upper() for m in self.http_method_names if hasattr(self, m)]\n",
  "name": "_allowed_methods",
  "docstring": "",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 45,
  "code": "@classonlymethod\ndef as_view(cls, **initkwargs):\n    \"\"\"\n    Main entry point for a request-response process.\n    \"\"\"\n    # sanitize keyword arguments\n    for key in initkwargs:\n        if key in cls.http_method_names:\n            raise TypeError(\"You tried to pass in the %s method name as a \"\n                            \"keyword argument to %s(). Don't do that.\"\n                            % (key, cls.__name__))\n        if not hasattr(cls, key):\n            raise TypeError(\"%s() received an invalid keyword %r. as_view \"\n                            \"only accepts arguments that are already \"\n                            \"attributes of the class.\" % (cls.__name__, key))\n    def view(request, *args, **kwargs):\n        self = cls(**initkwargs)\n        if hasattr(self, 'get') and not hasattr(self, 'head'):\n            self.head = self.get\n        self.request = request\n        self.args = args\n        self.kwargs = kwargs\n        return self.dispatch(request, *args, **kwargs)\n    # take name and docstring from class\n    update_wrapper(view, cls, updated=())\n    # and possible attributes set by decorators\n    # like csrf_exempt from dispatch\n    update_wrapper(view, cls.dispatch, assigned=())\n    return view\n",
  "name": "as_view",
  "docstring": "Main entry point for a request-response process.",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "cls, **initkwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 112,
  "code": "@classonlymethod\ndef as_view(cls, *args, **kwargs):\n    \"\"\"\n    This method is used within urls.py to create unique wizardview\n    instances for every request. We need to override this method because\n    we add some kwargs which are needed to make the wizardview usable.\n    \"\"\"\n    initkwargs = cls.get_initkwargs(*args, **kwargs)\n    return super(WizardView, cls).as_view(**initkwargs)\n",
  "name": "as_view",
  "docstring": "This method is used within urls.py to create unique wizardview\ninstances for every request. We need to override this method because\nwe add some kwargs which are needed to make the wizardview usable.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "cls, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 204,
  "code": "def delete(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "name": "delete",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 239,
  "code": "def delete(self, request, *args, **kwargs):\n    \"\"\"\n    Calls the delete() method on the fetched object and then\n    redirects to the success URL.\n    \"\"\"\n    self.object = self.get_object()\n    self.object.delete()\n    return HttpResponseRedirect(self.get_success_url())\n",
  "name": "delete",
  "docstring": "Calls the delete() method on the fetched object and then\nredirects to the success URL.",
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 35,
  "code": "def __dir__(self):\n    return self.all\n",
  "name": "__dir__",
  "docstring": "",
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 212,
  "code": "def dispatch(self, request, *args, **kwargs):\n    \"\"\"\n    This method gets called by the routing engine. The first argument is\n    `request` which contains a `HttpRequest` instance.\n    The request is stored in `self.request` for later use. The storage\n    instance is stored in `self.storage`.\n    After processing the request using the `dispatch` method, the\n    response gets updated by the storage engine (for example add cookies).\n    \"\"\"\n    # add the storage engine to the current wizardview instance\n    self.prefix = self.get_prefix(*args, **kwargs)\n    self.storage = get_storage(self.storage_name, self.prefix, request,\n        getattr(self, 'file_storage', None))\n    self.steps = StepsHelper(self)\n    response = super(WizardView, self).dispatch(request, *args, **kwargs)\n    # update the response (e.g. adding cookies)\n    self.storage.update_response(response)\n    return response\n",
  "name": "dispatch",
  "docstring": "This method gets called by the routing engine. The first argument is\n`request` which contains a `HttpRequest` instance.\nThe request is stored in `self.request` for later use. The storage\ninstance is stored in `self.storage`.\n\nAfter processing the request using the `dispatch` method, the\nresponse gets updated by the storage engine (for example add cookies).",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 78,
  "code": "def dispatch(self, request, *args, **kwargs):\n    # Try to dispatch to the right method; if a method doesn't exist,\n    # defer to the error handler. Also defer to the error handler if the\n    # request method isn't on the approved list.\n    if request.method.lower() in self.http_method_names:\n        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n    else:\n        handler = self.http_method_not_allowed\n    return handler(request, *args, **kwargs)\n",
  "name": "dispatch",
  "docstring": "",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 552,
  "code": "def done(self, form_list, **kwargs):\n    \"\"\"\n    This method must be overridden by a subclass to process to form data\n    after processing all steps.\n    \"\"\"\n    raise NotImplementedError(\"Your %s class has not defined a done() \"\n        \"method, which is required.\" % self.__class__.__name__)\n",
  "name": "done",
  "docstring": "This method must be overridden by a subclass to process to form data\nafter processing all steps.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form_list, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 67,
  "code": "def form_invalid(self, form):\n    \"\"\"\n    If the form is invalid, re-render the context data with the\n    data-filled form and errors.\n    \"\"\"\n    return self.render_to_response(self.get_context_data(form=form))\n",
  "name": "form_invalid",
  "docstring": "If the form is invalid, re-render the context data with the\ndata-filled form and errors.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 61,
  "code": "def form_valid(self, form):\n    \"\"\"\n    If the form is valid, redirect to the supplied URL.\n    \"\"\"\n    return HttpResponseRedirect(self.get_success_url())\n",
  "name": "form_valid",
  "docstring": "If the form is valid, redirect to the supplied URL.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 123,
  "code": "def form_valid(self, form):\n    \"\"\"\n    If the form is valid, save the associated model.\n    \"\"\"\n    self.object = form.save()\n    return super(ModelFormMixin, self).form_valid(form)\n",
  "name": "form_valid",
  "docstring": "If the form is valid, save the associated model.",
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 107,
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    context = self.get_context_data(object=self.object)\n    return self.render_to_response(context)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 603,
  "code": "def get(self, *args, **kwargs):\n    \"\"\"\n    This renders the form or, if needed, does the http redirects.\n    \"\"\"\n    step_url = kwargs.get('step', None)\n    if step_url is None:\n        if 'reset' in self.request.GET:\n            self.storage.reset()\n            self.storage.current_step = self.steps.first\n        if self.request.GET:\n            query_string = \"?%s\" % self.request.GET.urlencode()\n        else:\n            query_string = \"\"\n        return redirect(self.get_step_url(self.steps.current)\n                        + query_string)\n    # is the current step the \"done\" name/view?\n    elif step_url == self.done_step_name:\n        last_step = self.steps.last\n        return self.render_done(self.get_form(step=last_step,\n            data=self.storage.get_step_data(last_step),\n            files=self.storage.get_step_files(last_step)\n        ), **kwargs)\n    # is the url step name not equal to the step in the storage?\n    # if yes, change the step in the storage (if name exists)\n    elif step_url == self.steps.current:\n        # URL step name and storage step name are equal, render!\n        return self.render(self.get_form(\n            data=self.storage.current_step_data,\n            files=self.storage.current_step_files,\n        ), **kwargs)\n    elif step_url in self.get_form_list():\n        self.storage.current_step = step_url\n        return self.render(self.get_form(\n            data=self.storage.current_step_data,\n            files=self.storage.current_step_files,\n        ), **kwargs)\n    # invalid step name, reset to first and redirect.\n    else:\n        self.storage.current_step = self.steps.first\n        return redirect(self.get_step_url(self.steps.first))\n",
  "name": "get",
  "docstring": "This renders the form or, if needed, does the http redirects.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 152,
  "code": "def get(self, request, *args, **kwargs):\n    context = self.get_context_data(**kwargs)\n    return self.render_to_response(context)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 233,
  "code": "def get(self, request, *args, **kwargs):\n    \"\"\"\n    This method handles GET requests.\n    If a GET request reaches this point, the wizard assumes that the user\n    just starts at the first step or wants to restart the process.\n    The data of the wizard will be resetted before rendering the first step.\n    \"\"\"\n    self.storage.reset()\n    # reset the current step to the first step.\n    self.storage.current_step = self.steps.first\n    return self.render(self.get_form())\n",
  "name": "get",
  "docstring": "This method handles GET requests.\n\nIf a GET request reaches this point, the wizard assumes that the user\njust starts at the first step or wants to restart the process.\nThe data of the wizard will be resetted before rendering the first step.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 123,
  "code": "def get(self, request, *args, **kwargs):\n    self.object_list = self.get_queryset()\n    allow_empty = self.get_allow_empty()\n    if not allow_empty:\n        # When pagination is enabled and object_list is a queryset,\n        # it's better to do a cheap query than to load the unpaginated\n        # queryset in memory.\n        if (self.get_paginate_by(self.object_list) is not None\n            and hasattr(self.object_list, 'exists')):\n            is_empty = not self.object_list.exists()\n        else:\n            is_empty = len(self.object_list) == 0\n        if is_empty:\n            raise Http404(_(\"Empty list and '%(class_name)s.allow_empty' is False.\")\n                    % {'class_name': self.__class__.__name__})\n    context = self.get_context_data(object_list=self.object_list)\n    return self.render_to_response(context)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 193,
  "code": "def get(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).get(request, *args, **kwargs)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 216,
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).get(request, *args, **kwargs)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 180,
  "code": "def get(self, request, *args, **kwargs):\n    url = self.get_redirect_url(**kwargs)\n    if url:\n        if self.permanent:\n            return http.HttpResponsePermanentRedirect(url)\n        else:\n            return http.HttpResponseRedirect(url)\n    else:\n        logger.warning('Gone: %s', self.request.path,\n                    extra={\n                        'status_code': 410,\n                        'request': self.request\n                    })\n        return http.HttpResponseGone()\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 149,
  "code": "def get(self, request, *args, **kwargs):\n    \"\"\"\n    Handles GET requests and instantiates a blank version of the form.\n    \"\"\"\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    return self.render_to_response(self.get_context_data(form=form))\n",
  "name": "get",
  "docstring": "Handles GET requests and instantiates a blank version of the form.",
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 332,
  "code": "def get(self, request, *args, **kwargs):\n    self.date_list, self.object_list, extra_context = self.get_dated_items()\n    context = self.get_context_data(object_list=self.object_list,\n                                    date_list=self.date_list)\n    context.update(extra_context)\n    return self.render_to_response(context)\n",
  "name": "get",
  "docstring": "",
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 438,
  "code": "def get_all_cleaned_data(self):\n    \"\"\"\n    Returns a merged dictionary of all step cleaned_data dictionaries.\n    If a step contains a `FormSet`, the key will be prefixed with\n    'formset-' and contain a list of the formset cleaned_data dictionaries.\n    \"\"\"\n    cleaned_data = {}\n    for form_key in self.get_form_list():\n        form_obj = self.get_form(\n            step=form_key,\n            data=self.storage.get_step_data(form_key),\n            files=self.storage.get_step_files(form_key)\n        )\n        if form_obj.is_valid():\n            if isinstance(form_obj.cleaned_data, (tuple, list)):\n                cleaned_data.update({\n                    'formset-%s' % form_key: form_obj.cleaned_data\n                })\n            else:\n                cleaned_data.update(form_obj.cleaned_data)\n    return cleaned_data\n",
  "name": "get_all_cleaned_data",
  "docstring": "Returns a merged dictionary of all step cleaned_data dictionaries.\nIf a step contains a `FormSet`, the key will be prefixed with\n'formset-' and contain a list of the formset cleaned_data dictionaries.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 73,
  "code": "def get_allow_empty(self):\n    \"\"\"\n    Returns ``True`` if the view should display empty lists, and ``False``\n    if a 404 should be raised instead.\n    \"\"\"\n    return self.allow_empty\n",
  "name": "get_allow_empty",
  "docstring": "Returns ``True`` if the view should display empty lists, and ``False``\nif a 404 should be raised instead.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 272,
  "code": "def get_allow_future(self):\n    \"\"\"\n    Returns `True` if the view should be allowed to display objects from\n    the future.\n    \"\"\"\n    return self.allow_future\n",
  "name": "get_allow_future",
  "docstring": "Returns `True` if the view should be allowed to display objects from\nthe future.",
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 460,
  "code": "def get_cleaned_data_for_step(self, step):\n    \"\"\"\n    Returns the cleaned data for a given `step`. Before returning the\n    cleaned data, the stored values are revalidated through the form.\n    If the data doesn't validate, None will be returned.\n    \"\"\"\n    if step in self.form_list:\n        form_obj = self.get_form(step=step,\n            data=self.storage.get_step_data(step),\n            files=self.storage.get_step_files(step))\n        if form_obj.is_valid():\n            return form_obj.cleaned_data\n    return None\n",
  "name": "get_cleaned_data_for_step",
  "docstring": "Returns the cleaned data for a given `step`. Before returning the\ncleaned data, the stored values are revalidated through the form.\nIf the data doesn't validate, None will be returned.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 21,
  "code": "def get_context_data(self, **kwargs):\n    if 'view' not in kwargs:\n        kwargs['view'] = self\n    return kwargs\n",
  "name": "get_context_data",
  "docstring": "",
  "klass": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 130,
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    If an object has been supplied, inject it into the context with the\n    supplied context_object_name name.\n    \"\"\"\n    context = {}\n    if self.object:\n        context['object'] = self.object\n        context_object_name = self.get_context_object_name(self.object)\n        if context_object_name:\n            context[context_object_name] = self.object\n    context.update(kwargs)\n    return super(ModelFormMixin, self).get_context_data(**context)\n",
  "name": "get_context_data",
  "docstring": "If an object has been supplied, inject it into the context with the\nsupplied context_object_name name.",
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 511,
  "code": "def get_context_data(self, form, **kwargs):\n    \"\"\"\n    Returns the template context for a step. You can overwrite this method\n    to add more data for all or some steps. This method returns a\n    dictionary containing the rendered form step. Available template\n    context variables are:\n     * all extra data stored in the storage backend\n     * `form` - form instance of the current step\n     * `wizard` - the wizard instance itself\n    Example:\n    .. code-block:: python\n        class MyWizard(WizardView):\n            def get_context_data(self, form, **kwargs):\n                context = super(MyWizard, self).get_context_data(form=form, **kwargs)\n                if self.steps.current == 'my_step_name':\n                    context.update({'another_var': True})\n                return context\n    \"\"\"\n    context = super(WizardView, self).get_context_data(form=form, **kwargs)\n    context.update(self.storage.extra_data)\n    context['wizard'] = {\n        'form': form,\n        'steps': self.steps,\n        'management_form': ManagementForm(prefix=self.prefix, initial={\n            'current_step': self.steps.current,\n        }),\n    }\n    return context\n",
  "name": "get_context_data",
  "docstring": "Returns the template context for a step. You can overwrite this method\nto add more data for all or some steps. This method returns a\ndictionary containing the rendered form step. Available template\ncontext variables are:\n\n * all extra data stored in the storage backend\n * `form` - form instance of the current step\n * `wizard` - the wizard instance itself\n\nExample:\n\n.. code-block:: python\n\n    class MyWizard(WizardView):\n        def get_context_data(self, form, **kwargs):\n            context = super(MyWizard, self).get_context_data(form=form, **kwargs)\n            if self.steps.current == 'my_step_name':\n                context.update({'another_var': True})\n            return context",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 91,
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context for this view.\n    \"\"\"\n    queryset = kwargs.pop('object_list')\n    page_size = self.get_paginate_by(queryset)\n    context_object_name = self.get_context_object_name(queryset)\n    if page_size:\n        paginator, page, queryset, is_paginated = self.paginate_queryset(queryset, page_size)\n        context = {\n            'paginator': paginator,\n            'page_obj': page,\n            'is_paginated': is_paginated,\n            'object_list': queryset\n        }\n    else:\n        context = {\n            'paginator': None,\n            'page_obj': None,\n            'is_paginated': False,\n            'object_list': queryset\n        }\n    if context_object_name is not None:\n        context[context_object_name] = queryset\n    context.update(kwargs)\n    return super(MultipleObjectMixin, self).get_context_data(**context)\n",
  "name": "get_context_data",
  "docstring": "Get the context for this view.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 91,
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Insert the single object into the context dict.\n    \"\"\"\n    context = {}\n    context_object_name = self.get_context_object_name(self.object)\n    if context_object_name:\n        context[context_object_name] = self.object\n    context.update(kwargs)\n    return super(SingleObjectMixin, self).get_context_data(**context)\n",
  "name": "get_context_data",
  "docstring": "Insert the single object into the context dict.",
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 659,
  "code": "def get_context_data(self, form, **kwargs):\n    \"\"\"\n    NamedUrlWizardView provides the url_name of this wizard in the context\n    dict `wizard`.\n    \"\"\"\n    context = super(NamedUrlWizardView, self).get_context_data(form=form, **kwargs)\n    context['wizard']['url_name'] = self.url_name\n    return context\n",
  "name": "get_context_data",
  "docstring": "NamedUrlWizardView provides the url_name of this wizard in the context\ndict `wizard`.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 80,
  "code": "def get_context_object_name(self, object_list):\n    \"\"\"\n    Get the name of the item to be used in the context.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(object_list, 'model'):\n        return '%s_list' % object_list.model._meta.object_name.lower()\n    else:\n        return None\n",
  "name": "get_context_object_name",
  "docstring": "Get the name of the item to be used in the context.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, object_list"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 80,
  "code": "def get_context_object_name(self, obj):\n    \"\"\"\n    Get the name to use for the object.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif isinstance(obj, models.Model):\n        return obj._meta.object_name.lower()\n    else:\n        return None\n",
  "name": "get_context_object_name",
  "docstring": "Get the name to use for the object.",
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self, obj"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 180,
  "code": "def _get_current_day(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date\n",
  "name": "_get_current_day",
  "docstring": "Return the start date of the current interval.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 124,
  "code": "def _get_current_month(self, date):\n    \"\"\"\n    Return the start date of the previous interval.\n    \"\"\"\n    return date.replace(day=1)\n",
  "name": "_get_current_month",
  "docstring": "Return the start date of the previous interval.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 236,
  "code": "def _get_current_week(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date - datetime.timedelta(self._get_weekday(date))\n",
  "name": "_get_current_week",
  "docstring": "Return the start date of the current interval.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 65,
  "code": "def _get_current_year(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date.replace(month=1, day=1)\n",
  "name": "_get_current_year",
  "docstring": "Return the start date of the current interval.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 583,
  "code": "def _get_dated_items(self, date):\n    \"\"\"\n    Do the actual heavy lifting of getting the dated items; this accepts a\n    date object so that TodayArchiveView can be trivial.\n    \"\"\"\n    lookup_kwargs = self._make_single_date_lookup(date)\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'day': date,\n        'previous_day': self.get_previous_day(date),\n        'next_day': self.get_next_day(date),\n        'previous_month': self.get_previous_month(date),\n        'next_month': self.get_next_month(date)\n    })\n",
  "name": "_get_dated_items",
  "docstring": "Do the actual heavy lifting of getting the dated items; this accepts a\ndate object so that TodayArchiveView can be trivial.",
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 434,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format())\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_year(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(ordering='-%s' % date_field, **lookup_kwargs)\n    date_list = self.get_date_list(qs)\n    if not self.get_make_object_list():\n        # We need this to be a queryset since parent classes introspect it\n        # to find information about the model.\n        qs = qs.none()\n    return (date_list, qs, {\n        'year': date,\n        'next_year': self.get_next_year(date),\n        'previous_year': self.get_previous_year(date),\n    })\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 407,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    qs = self.get_dated_queryset(ordering='-%s' % self.get_date_field())\n    date_list = self.get_date_list(qs, ordering='DESC')\n    if not date_list:\n        qs = qs.none()\n    return (date_list, qs, {})\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 339,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Obtain the list of dates and items.\n    \"\"\"\n    raise NotImplementedError('A DateView must provide an implementation of get_dated_items()')\n",
  "name": "get_dated_items",
  "docstring": "Obtain the list of dates and items.",
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 612,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    return self._get_dated_items(datetime.date.today())\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 525,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    week = self.get_week()\n    date_field = self.get_date_field()\n    week_format = self.get_week_format()\n    week_start = {\n        '%W': '1',\n        '%U': '0',\n    }[week_format]\n    date = _date_from_string(year, self.get_year_format(),\n                             week_start, '%w',\n                             week, week_format)\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_week(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'week': date,\n        'next_week': self.get_next_week(date),\n        'previous_week': self.get_previous_week(date),\n    })\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 569,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    return self._get_dated_items(date)\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 485,
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format())\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_month(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    date_list = self.get_date_list(qs)\n    return (date_list, qs, {\n        'month': date,\n        'next_month': self.get_next_month(date),\n        'previous_month': self.get_previous_month(date),\n    })\n",
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "klass": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 345,
  "code": "def get_dated_queryset(self, ordering=None, **lookup):\n    \"\"\"\n    Get a queryset properly filtered according to `allow_future` and any\n    extra lookup kwargs.\n    \"\"\"\n    qs = self.get_queryset().filter(**lookup)\n    date_field = self.get_date_field()\n    allow_future = self.get_allow_future()\n    allow_empty = self.get_allow_empty()\n    paginate_by = self.get_paginate_by(qs)\n    if ordering is not None:\n        qs = qs.order_by(ordering)\n    if not allow_future:\n        now = timezone.now() if self.uses_datetime_field else timezone_today()\n        qs = qs.filter(**{'%s__lte' % date_field: now})\n    if not allow_empty:\n        # When pagination is enabled, it's better to do a cheap query\n        # than to load the unpaginated queryset in memory.\n        is_empty = len(qs) == 0 if paginate_by is None else not qs.exists()\n        if is_empty:\n            raise Http404(_(\"No %(verbose_name_plural)s available\") % {\n                    'verbose_name_plural': force_text(qs.model._meta.verbose_name_plural)\n            })\n    return qs\n",
  "name": "get_dated_queryset",
  "docstring": "Get a queryset properly filtered according to `allow_future` and any\nextra lookup kwargs.",
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, ordering=None, **lookup"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 264,
  "code": "def get_date_field(self):\n    \"\"\"\n    Get the name of the date field to be used to filter by.\n    \"\"\"\n    if self.date_field is None:\n        raise ImproperlyConfigured(\"%s.date_field is required.\" % self.__class__.__name__)\n    return self.date_field\n",
  "name": "get_date_field",
  "docstring": "Get the name of the date field to be used to filter by.",
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 380,
  "code": "def get_date_list(self, queryset, date_type=None, ordering='ASC'):\n    \"\"\"\n    Get a date list by calling `queryset.dates()`, checking along the way\n    for empty lists that aren't allowed.\n    \"\"\"\n    date_field = self.get_date_field()\n    allow_empty = self.get_allow_empty()\n    if date_type is None:\n        date_type = self.get_date_list_period()\n    date_list = queryset.dates(date_field, date_type, ordering)\n    if date_list is not None and not date_list and not allow_empty:\n        name = force_text(queryset.model._meta.verbose_name_plural)\n        raise Http404(_(\"No %(verbose_name_plural)s available\") %\n                      {'verbose_name_plural': name})\n    return date_list\n",
  "name": "get_date_list",
  "docstring": "Get a date list by calling `queryset.dates()`, checking along the way\nfor empty lists that aren't allowed.",
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset, date_type=None, ordering=u'ASC'"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 374,
  "code": "def get_date_list_period(self):\n    \"\"\"\n    Get the aggregation period for the list of dates: 'year', 'month', or 'day'.\n    \"\"\"\n    return self.date_list_period\n",
  "name": "get_date_list_period",
  "docstring": "Get the aggregation period for the list of dates: 'year', 'month', or 'day'.",
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 145,
  "code": "def get_day(self):\n    \"\"\"\n    Return the day for which this view should display data.\n    \"\"\"\n    day = self.day\n    if day is None:\n        try:\n            day = self.kwargs['day']\n        except KeyError:\n            try:\n                day = self.request.GET['day']\n            except KeyError:\n                raise Http404(_(\"No day specified\"))\n    return day\n",
  "name": "get_day",
  "docstring": "Return the day for which this view should display data.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 138,
  "code": "def get_day_format(self):\n    \"\"\"\n    Get a day format string in strptime syntax to be used to parse the day\n    from url variables.\n    \"\"\"\n    return self.day_format\n",
  "name": "get_day_format",
  "docstring": "Get a day format string in strptime syntax to be used to parse the day\nfrom url variables.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 372,
  "code": "def get_form(self, step=None, data=None, files=None):\n    \"\"\"\n    Constructs the form for a given `step`. If no `step` is defined, the\n    current step will be determined automatically.\n    The form will be initialized using the `data` argument to prefill the\n    new form. If needed, instance or queryset (for `ModelForm` or\n    `ModelFormSet`) will be added too.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    # prepare the kwargs for the form instance.\n    kwargs = self.get_form_kwargs(step)\n    kwargs.update({\n        'data': data,\n        'files': files,\n        'prefix': self.get_form_prefix(step, self.form_list[step]),\n        'initial': self.get_form_initial(step),\n    })\n    if issubclass(self.form_list[step], forms.ModelForm):\n        # If the form is based on ModelForm, add instance if available\n        # and not previously set.\n        kwargs.setdefault('instance', self.get_form_instance(step))\n    elif issubclass(self.form_list[step], forms.models.BaseModelFormSet):\n        # If the form is based on ModelFormSet, add queryset if available\n        # and not previous set.\n        kwargs.setdefault('queryset', self.get_form_instance(step))\n    return self.form_list[step](**kwargs)\n",
  "name": "get_form",
  "docstring": "Constructs the form for a given `step`. If no `step` is defined, the\ncurrent step will be determined automatically.\n\nThe form will be initialized using the `data` argument to prefill the\nnew form. If needed, instance or queryset (for `ModelForm` or\n`ModelFormSet`) will be added too.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None, data=None, files=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 31,
  "code": "def get_form(self, form_class):\n    \"\"\"\n    Returns an instance of the form to be used in this view.\n    \"\"\"\n    return form_class(**self.get_form_kwargs())\n",
  "name": "get_form",
  "docstring": "Returns an instance of the form to be used in this view.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form_class"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 80,
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view.\n    \"\"\"\n    if self.form_class:\n        return self.form_class\n    else:\n        if self.model is not None:\n            # If a model has been explicitly provided, use it\n            model = self.model\n        elif hasattr(self, 'object') and self.object is not None:\n            # If this view is operating on a single object, use\n            # the class of that object\n            model = self.object.__class__\n        else:\n            # Try to get a queryset and extract the model class\n            # from that\n            model = self.get_queryset().model\n        return model_forms.modelform_factory(model)\n",
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view.",
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 25,
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    return self.form_class\n",
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 349,
  "code": "def get_form_initial(self, step):\n    \"\"\"\n    Returns a dictionary which will be passed to the form for `step`\n    as `initial`. If no initial data was provied while initializing the\n    form wizard, a empty dictionary will be returned.\n    \"\"\"\n    return self.initial_dict.get(step, {})\n",
  "name": "get_form_initial",
  "docstring": "Returns a dictionary which will be passed to the form for `step`\nas `initial`. If no initial data was provied while initializing the\nform wizard, a empty dictionary will be returned.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 357,
  "code": "def get_form_instance(self, step):\n    \"\"\"\n    Returns a object which will be passed to the form for `step`\n    as `instance`. If no instance object was provied while initializing\n    the form wizard, None will be returned.\n    \"\"\"\n    return self.instance_dict.get(step, None)\n",
  "name": "get_form_instance",
  "docstring": "Returns a object which will be passed to the form for `step`\nas `instance`. If no instance object was provied while initializing\nthe form wizard, None will be returned.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 100,
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form.\n    \"\"\"\n    kwargs = super(ModelFormMixin, self).get_form_kwargs()\n    kwargs.update({'instance': self.object})\n    return kwargs\n",
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form.",
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 365,
  "code": "def get_form_kwargs(self, step=None):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form\n    (or formset) on the given step.\n    \"\"\"\n    return {}\n",
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form\n(or formset) on the given step.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 37,
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form.\n    \"\"\"\n    kwargs = {'initial': self.get_initial()}\n    if self.request.method in ('POST', 'PUT'):\n        kwargs.update({\n            'data': self.request.POST,\n            'files': self.request.FILES,\n        })\n    return kwargs\n",
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 189,
  "code": "def get_form_list(self):\n    \"\"\"\n    This method returns a form_list based on the initial form list but\n    checks if there is a condition method/value in the condition_list.\n    If an entry exists in the condition list, it will call/read the value\n    and respect the result. (True means add the form, False means ignore\n    the form)\n    The form_list is always generated on the fly because condition methods\n    could use data from other (maybe previous forms).\n    \"\"\"\n    form_list = SortedDict()\n    for form_key, form_class in six.iteritems(self.form_list):\n        # try to fetch the value from condition list, by default, the form\n        # gets passed to the new list.\n        condition = self.condition_dict.get(form_key, True)\n        if callable(condition):\n            # call the value if needed, passes the current instance.\n            condition = condition(self)\n        if condition:\n            form_list[form_key] = form_class\n    return form_list\n",
  "name": "get_form_list",
  "docstring": "This method returns a form_list based on the initial form list but\nchecks if there is a condition method/value in the condition_list.\nIf an entry exists in the condition list, it will call/read the value\nand respect the result. (True means add the form, False means ignore\nthe form)\n\nThe form_list is always generated on the fly because condition methods\ncould use data from other (maybe previous forms).",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 336,
  "code": "def get_form_prefix(self, step=None, form=None):\n    \"\"\"\n    Returns the prefix which will be used when calling the actual form for\n    the given step. `step` contains the step-name, `form` the form which\n    will be called with the returned prefix.\n    If no step is given, the form_prefix will determine the current step\n    automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    return str(step)\n",
  "name": "get_form_prefix",
  "docstring": "Returns the prefix which will be used when calling the actual form for\nthe given step. `step` contains the step-name, `form` the form which\nwill be called with the returned prefix.\n\nIf no step is given, the form_prefix will determine the current step\nautomatically.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None, form=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 424,
  "code": "def get_form_step_data(self, form):\n    \"\"\"\n    Is used to return the raw form data. You may use this method to\n    manipulate the data.\n    \"\"\"\n    return form.data\n",
  "name": "get_form_step_data",
  "docstring": "Is used to return the raw form data. You may use this method to\nmanipulate the data.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 431,
  "code": "def get_form_step_files(self, form):\n    \"\"\"\n    Is used to return the raw form files. You may use this method to\n    manipulate the data.\n    \"\"\"\n    return form.files\n",
  "name": "get_form_step_files",
  "docstring": "Is used to return the raw form files. You may use this method to\nmanipulate the data.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 19,
  "code": "def get_initial(self):\n    \"\"\"\n    Returns the initial data to use for forms on this view.\n    \"\"\"\n    return self.initial.copy()\n",
  "name": "get_initial",
  "docstring": "Returns the initial data to use for forms on this view.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 122,
  "code": "@classmethod\ndef get_initkwargs(cls, form_list, initial_dict=None,\n        instance_dict=None, condition_dict=None, *args, **kwargs):\n    \"\"\"\n    Creates a dict with all needed parameters for the form wizard instances.\n    * `form_list` - is a list of forms. The list entries can be single form\n      classes or tuples of (`step_name`, `form_class`). If you pass a list\n      of forms, the wizardview will convert the class list to\n      (`zero_based_counter`, `form_class`). This is needed to access the\n      form for a specific step.\n    * `initial_dict` - contains a dictionary of initial data dictionaries.\n      The key should be equal to the `step_name` in the `form_list` (or\n      the str of the zero based counter - if no step_names added in the\n      `form_list`)\n    * `instance_dict` - contains a dictionary whose values are model\n      instances if the step is based on a ``ModelForm`` and querysets if\n      the step is based on a ``ModelFormSet``. The key should be equal to\n      the `step_name` in the `form_list`. Same rules as for `initial_dict`\n      apply.\n    * `condition_dict` - contains a dictionary of boolean values or\n      callables. If the value of for a specific `step_name` is callable it\n      will be called with the wizardview instance as the only argument.\n      If the return value is true, the step's form will be used.\n    \"\"\"\n    kwargs.update({\n        'initial_dict': initial_dict or {},\n        'instance_dict': instance_dict or {},\n        'condition_dict': condition_dict or {},\n    })\n    init_form_list = SortedDict()\n    assert len(form_list) > 0, 'at least one form is needed'\n    # walk through the passed form list\n    for i, form in enumerate(form_list):\n        if isinstance(form, (list, tuple)):\n            # if the element is a tuple, add the tuple to the new created\n            # sorted dictionary.\n            init_form_list[six.text_type(form[0])] = form[1]\n        else:\n            # if not, add the form with a zero based counter as unicode\n            init_form_list[six.text_type(i)] = form\n    # walk through the new created list of forms\n    for form in six.itervalues(init_form_list):\n        if issubclass(form, formsets.BaseFormSet):\n            # if the element is based on BaseFormSet (FormSet/ModelFormSet)\n            # we need to override the form variable.\n            form = form.form\n        # check if any form contains a FileField, if yes, we need a\n        # file_storage added to the wizardview (by subclassing).\n        for field in six.itervalues(form.base_fields):\n            if (isinstance(field, forms.FileField) and\n                    not hasattr(cls, 'file_storage')):\n                raise NoFileStorageConfigured(\n                        \"You need to define 'file_storage' in your \"\n                        \"wizard view in order to handle file uploads.\")\n    # build the kwargs for the wizardview instances\n    kwargs['form_list'] = init_form_list\n    return kwargs\n",
  "name": "get_initkwargs",
  "docstring": "Creates a dict with all needed parameters for the form wizard instances.\n\n* `form_list` - is a list of forms. The list entries can be single form\n  classes or tuples of (`step_name`, `form_class`). If you pass a list\n  of forms, the wizardview will convert the class list to\n  (`zero_based_counter`, `form_class`). This is needed to access the\n  form for a specific step.\n* `initial_dict` - contains a dictionary of initial data dictionaries.\n  The key should be equal to the `step_name` in the `form_list` (or\n  the str of the zero based counter - if no step_names added in the\n  `form_list`)\n* `instance_dict` - contains a dictionary whose values are model\n  instances if the step is based on a ``ModelForm`` and querysets if\n  the step is based on a ``ModelFormSet``. The key should be equal to\n  the `step_name` in the `form_list`. Same rules as for `initial_dict`\n  apply.\n* `condition_dict` - contains a dictionary of boolean values or\n  callables. If the value of for a specific `step_name` is callable it\n  will be called with the wizardview instance as the only argument.\n  If the return value is true, the step's form will be used.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "cls, form_list, initial_dict=None, instance_dict=None, condition_dict=None, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 582,
  "code": "@classmethod\ndef get_initkwargs(cls, *args, **kwargs):\n    \"\"\"\n    We require a url_name to reverse URLs later. Additionally users can\n    pass a done_step_name to change the URL name of the \"done\" view.\n    \"\"\"\n    assert 'url_name' in kwargs, 'URL name is needed to resolve correct wizard URLs'\n    extra_kwargs = {\n        'done_step_name': kwargs.pop('done_step_name', 'done'),\n        'url_name': kwargs.pop('url_name'),\n    }\n    initkwargs = super(NamedUrlWizardView, cls).get_initkwargs(*args, **kwargs)\n    initkwargs.update(extra_kwargs)\n    assert initkwargs['done_step_name'] not in initkwargs['form_list'], \\\n        'step name \"%s\" is reserved for \"done\" view' % initkwargs['done_step_name']\n    return initkwargs\n",
  "name": "get_initkwargs",
  "docstring": "We require a url_name to reverse URLs later. Additionally users can\npass a done_step_name to change the URL name of the \"done\" view.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "cls, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 464,
  "code": "def get_make_object_list(self):\n    \"\"\"\n    Return `True` if this view should contain the full list of objects in\n    the given year.\n    \"\"\"\n    return self.make_object_list\n",
  "name": "get_make_object_list",
  "docstring": "Return `True` if this view should contain the full list of objects in\nthe given year.",
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 86,
  "code": "def get_month(self):\n    \"\"\"\n    Return the month for which this view should display data.\n    \"\"\"\n    month = self.month\n    if month is None:\n        try:\n            month = self.kwargs['month']\n        except KeyError:\n            try:\n                month = self.request.GET['month']\n            except KeyError:\n                raise Http404(_(\"No month specified\"))\n    return month\n",
  "name": "get_month",
  "docstring": "Return the month for which this view should display data.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 79,
  "code": "def get_month_format(self):\n    \"\"\"\n    Get a month format string in strptime syntax to be used to parse the\n    month from url variables.\n    \"\"\"\n    return self.month_format\n",
  "name": "get_month_format",
  "docstring": "Get a month format string in strptime syntax to be used to parse the\nmonth from url variables.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 172,
  "code": "def _get_next_day(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date + datetime.timedelta(days=1)\n",
  "name": "_get_next_day",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 160,
  "code": "def get_next_day(self, date):\n    \"\"\"\n    Get the next valid day.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='day')\n",
  "name": "get_next_day",
  "docstring": "Get the next valid day.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 113,
  "code": "def _get_next_month(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    if date.month == 12:\n        return date.replace(year=date.year + 1, month=1, day=1)\n    else:\n        return date.replace(month=date.month + 1, day=1)\n",
  "name": "_get_next_month",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 101,
  "code": "def get_next_month(self, date):\n    \"\"\"\n    Get the next valid month.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='month')\n",
  "name": "get_next_month",
  "docstring": "Get the next valid month.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 474,
  "code": "def get_next_step(self, step=None):\n    \"\"\"\n    Returns the next step after the given `step`. If no more steps are\n    available, None will be returned. If the `step` argument is None, the\n    current step will be determined automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    form_list = self.get_form_list()\n    key = form_list.keyOrder.index(step) + 1\n    if len(form_list.keyOrder) > key:\n        return form_list.keyOrder[key]\n    return None\n",
  "name": "get_next_step",
  "docstring": "Returns the next step after the given `step`. If no more steps are\navailable, None will be returned. If the `step` argument is None, the\ncurrent step will be determined automatically.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 228,
  "code": "def _get_next_week(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date + datetime.timedelta(days=7 - self._get_weekday(date))\n",
  "name": "_get_next_week",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 216,
  "code": "def get_next_week(self, date):\n    \"\"\"\n    Get the next valid week.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='week')\n",
  "name": "get_next_week",
  "docstring": "Get the next valid week.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 57,
  "code": "def _get_next_year(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date.replace(year=date.year + 1, month=1, day=1)\n",
  "name": "_get_next_year",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 45,
  "code": "def get_next_year(self, date):\n    \"\"\"\n    Get the next valid year.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='year')\n",
  "name": "get_next_year",
  "docstring": "Get the next valid year.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 21,
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Returns the object the view is displaying.\n    By default this requires `self.queryset` and a `pk` or `slug` argument\n    in the URLconf, but subclasses can override this to return any object.\n    \"\"\"\n    # Use a custom queryset if provided; this is required for subclasses\n    # like DateDetailView\n    if queryset is None:\n        queryset = self.get_queryset()\n    # Next, try looking up by primary key.\n    pk = self.kwargs.get(self.pk_url_kwarg, None)\n    slug = self.kwargs.get(self.slug_url_kwarg, None)\n    if pk is not None:\n        queryset = queryset.filter(pk=pk)\n    # Next, try looking up by slug.\n    elif slug is not None:\n        slug_field = self.get_slug_field()\n        queryset = queryset.filter(**{slug_field: slug})\n    # If none of those are defined, it's an error.\n    else:\n        raise AttributeError(\"Generic detail view %s must be called with \"\n                             \"either an object pk or a slug.\"\n                             % self.__class__.__name__)\n    try:\n        # Get the single item from the filtered queryset\n        obj = queryset.get()\n    except ObjectDoesNotExist:\n        raise Http404(_(\"No %(verbose_name)s found matching the query\") %\n                      {'verbose_name': queryset.model._meta.verbose_name})\n    return obj\n",
  "name": "get_object",
  "docstring": "Returns the object the view is displaying.\n\nBy default this requires `self.queryset` and a `pk` or `slug` argument\nin the URLconf, but subclasses can override this to return any object.",
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 631,
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Get the object this request displays.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    # Use a custom queryset if provided\n    qs = queryset or self.get_queryset()\n    if not self.get_allow_future() and date > datetime.date.today():\n        raise Http404(_(\"Future %(verbose_name_plural)s not available because %(class_name)s.allow_future is False.\") % {\n            'verbose_name_plural': qs.model._meta.verbose_name_plural,\n            'class_name': self.__class__.__name__,\n        })\n    # Filter down a queryset from self.queryset using the date from the\n    # URL. This'll get passed as the queryset to DetailView.get_object,\n    # which'll handle the 404\n    lookup_kwargs = self._make_single_date_lookup(date)\n    qs = qs.filter(**lookup_kwargs)\n    return super(BaseDetailView, self).get_object(queryset=qs)\n",
  "name": "get_object",
  "docstring": "Get the object this request displays.",
  "klass": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 61,
  "code": "def get_paginate_by(self, queryset):\n    \"\"\"\n    Get the number of items to paginate by, or ``None`` for no pagination.\n    \"\"\"\n    return self.paginate_by\n",
  "name": "get_paginate_by",
  "docstring": "Get the number of items to paginate by, or ``None`` for no pagination.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 67,
  "code": "def get_paginator(self, queryset, per_page, orphans=0, allow_empty_first_page=True):\n    \"\"\"\n    Return an instance of the paginator for this view.\n    \"\"\"\n    return self.paginator_class(queryset, per_page, orphans=orphans, allow_empty_first_page=allow_empty_first_page)\n",
  "name": "get_paginator",
  "docstring": "Return an instance of the paginator for this view.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset, per_page, orphans=0, allow_empty_first_page=True"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 185,
  "code": "def get_prefix(self, *args, **kwargs):\n    # TODO: Add some kind of unique id to prefix\n    return normalize_name(self.__class__.__name__)\n",
  "name": "get_prefix",
  "docstring": "",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 166,
  "code": "def get_previous_day(self, date):\n    \"\"\"\n    Get the previous valid day.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='day')\n",
  "name": "get_previous_day",
  "docstring": "Get the previous valid day.",
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 107,
  "code": "def get_previous_month(self, date):\n    \"\"\"\n    Get the previous valid month.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='month')\n",
  "name": "get_previous_month",
  "docstring": "Get the previous valid month.",
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 222,
  "code": "def get_previous_week(self, date):\n    \"\"\"\n    Get the previous valid week.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='week')\n",
  "name": "get_previous_week",
  "docstring": "Get the previous valid week.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 51,
  "code": "def get_previous_year(self, date):\n    \"\"\"\n    Get the previous valid year.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='year')\n",
  "name": "get_previous_year",
  "docstring": "Get the previous valid year.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 488,
  "code": "def get_prev_step(self, step=None):\n    \"\"\"\n    Returns the previous step before the given `step`. If there are no\n    steps available, None will be returned. If the `step` argument is\n    None, the current step will be determined automatically.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    form_list = self.get_form_list()\n    key = form_list.keyOrder.index(step) - 1\n    if key >= 0:\n        return form_list.keyOrder[key]\n    return None\n",
  "name": "get_prev_step",
  "docstring": "Returns the previous step before the given `step`. If there are no\nsteps available, None will be returned. If the `step` argument is\nNone, the current step will be determined automatically.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 22,
  "code": "def get_queryset(self):\n    \"\"\"\n    Get the list of items for this view. This must be an iterable, and may\n    be a queryset (in which qs-specific behavior will be enabled).\n    \"\"\"\n    if self.queryset is not None:\n        queryset = self.queryset\n        if hasattr(queryset, '_clone'):\n            queryset = queryset._clone()\n    elif self.model is not None:\n        queryset = self.model._default_manager.all()\n    else:\n        raise ImproperlyConfigured(\"'%s' must define 'queryset' or 'model'\"\n                                   % self.__class__.__name__)\n    return queryset\n",
  "name": "get_queryset",
  "docstring": "Get the list of items for this view. This must be an iterable, and may\nbe a queryset (in which qs-specific behavior will be enabled).",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 58,
  "code": "def get_queryset(self):\n    \"\"\"\n    Get the queryset to look an object up against. May not be called if\n    `get_object` is overridden.\n    \"\"\"\n    if self.queryset is None:\n        if self.model:\n            return self.model._default_manager.all()\n        else:\n            raise ImproperlyConfigured(\"%(cls)s is missing a queryset. Define \"\n                                       \"%(cls)s.model, %(cls)s.queryset, or override \"\n                                       \"%(cls)s.get_queryset().\" % {\n                                            'cls': self.__class__.__name__\n                                    })\n    return self.queryset._clone()\n",
  "name": "get_queryset",
  "docstring": "Get the queryset to look an object up against. May not be called if\n`get_object` is overridden.",
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 165,
  "code": "def get_redirect_url(self, **kwargs):\n    \"\"\"\n    Return the URL redirect to. Keyword arguments from the\n    URL pattern match generating the redirect request\n    are provided as kwargs to this method.\n    \"\"\"\n    if self.url:\n        url = self.url % kwargs\n        args = self.request.META.get('QUERY_STRING', '')\n        if args and self.query_string:\n            url = \"%s?%s\" % (url, args)\n        return url\n    else:\n        return None\n",
  "name": "get_redirect_url",
  "docstring": "Return the URL redirect to. Keyword arguments from the\nURL pattern match generating the redirect request\nare provided as kwargs to this method.",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 74,
  "code": "def get_slug_field(self):\n    \"\"\"\n    Get the name of a slug field to be used to look up by slug.\n    \"\"\"\n    return self.slug_field\n",
  "name": "get_slug_field",
  "docstring": "Get the name of a slug field to be used to look up by slug.",
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 502,
  "code": "def get_step_index(self, step=None):\n    \"\"\"\n    Returns the index for the given `step` name. If no step is given,\n    the current step will be used to get the index.\n    \"\"\"\n    if step is None:\n        step = self.steps.current\n    return self.get_form_list().keyOrder.index(step)\n",
  "name": "get_step_index",
  "docstring": "Returns the index for the given `step` name. If no step is given,\nthe current step will be used to get the index.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step=None"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 600,
  "code": "def get_step_url(self, step):\n    return reverse(self.url_name, kwargs={'step': step})\n",
  "name": "get_step_url",
  "docstring": "",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 252,
  "code": "def get_success_url(self):\n    if self.success_url:\n        return self.success_url\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n",
  "name": "get_success_url",
  "docstring": "",
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 108,
  "code": "def get_success_url(self):\n    \"\"\"\n    Returns the supplied URL.\n    \"\"\"\n    if self.success_url:\n        url = self.success_url % self.object.__dict__\n    else:\n        try:\n            url = self.object.get_absolute_url()\n        except AttributeError:\n            raise ImproperlyConfigured(\n                \"No URL to redirect to.  Either provide a url or define\"\n                \" a get_absolute_url method on the Model.\")\n    return url\n",
  "name": "get_success_url",
  "docstring": "Returns the supplied URL.",
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 49,
  "code": "def get_success_url(self):\n    \"\"\"\n    Returns the supplied success URL.\n    \"\"\"\n    if self.success_url:\n        # Forcing possible reverse_lazy evaluation\n        url = force_text(self.success_url)\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n    return url\n",
  "name": "get_success_url",
  "docstring": "Returns the supplied success URL.",
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 134,
  "code": "def get_template_names(self):\n    \"\"\"\n    Returns a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    if self.template_name is None:\n        raise ImproperlyConfigured(\n            \"TemplateResponseMixin requires either a definition of \"\n            \"'template_name' or an implementation of 'get_template_names()'\")\n    else:\n        return [self.template_name]\n",
  "name": "get_template_names",
  "docstring": "Returns a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.",
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 149,
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    try:\n        names = super(MultipleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If the list is a queryset, we'll invent a template name based on the\n    # app and model name. This name gets put at the end of the template\n    # name list so that user-supplied names override the automatically-\n    # generated ones.\n    if hasattr(self.object_list, 'model'):\n        opts = self.object_list.model._meta\n        names.append(\"%s/%s%s.html\" % (opts.app_label, opts.object_name.lower(), self.template_name_suffix))\n    return names\n",
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.",
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 117,
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. May not be\n    called if render_to_response is overridden. Returns the following list:\n    * the value of ``template_name`` on the view (if provided)\n    * the contents of the ``template_name_field`` field on the\n      object instance that the view is operating upon (if available)\n    * ``<app_label>/<object_name><template_name_suffix>.html``        \n    \"\"\"\n    try:\n        names = super(SingleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If self.template_name_field is set, grab the value of the field\n    # of that name from the object; this is the most specific template\n    # name, if given.\n    if self.object and self.template_name_field:\n        name = getattr(self.object, self.template_name_field, None)\n        if name:\n            names.insert(0, name)\n    # The least-specific option is the default <app>/<model>_detail.html;\n    # only use this if the object in question is a model.\n    if isinstance(self.object, models.Model):\n        names.append(\"%s/%s%s.html\" % (\n            self.object._meta.app_label,\n            self.object._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    elif hasattr(self, 'model') and self.model is not None and issubclass(self.model, models.Model):\n        names.append(\"%s/%s%s.html\" % (\n            self.model._meta.app_label,\n            self.model._meta.object_name.lower(),\n            self.template_name_suffix\n        ))\n    return names\n",
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. May not be\ncalled if render_to_response is overridden. Returns the following list:\n\n* the value of ``template_name`` on the view (if provided)\n* the contents of the ``template_name_field`` field on the\n  object instance that the view is operating upon (if available)\n* ``<app_label>/<object_name><template_name_suffix>.html``        ",
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 201,
  "code": "def get_week(self):\n    \"\"\"\n    Return the week for which this view should display data\n    \"\"\"\n    week = self.week\n    if week is None:\n        try:\n            week = self.kwargs['week']\n        except KeyError:\n            try:\n                week = self.request.GET['week']\n            except KeyError:\n                raise Http404(_(\"No week specified\"))\n    return week\n",
  "name": "get_week",
  "docstring": "Return the week for which this view should display data",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 242,
  "code": "def _get_weekday(self, date):\n    \"\"\"\n    Return the weekday for a given date.\n    The first day according to the week format is 0 and the last day is 6.\n    \"\"\"\n    week_format = self.get_week_format()\n    if week_format == '%W':                 # week starts on Monday\n        return date.weekday()\n    elif week_format == '%U':               # week starts on Sunday\n        return (date.weekday() + 1) % 7\n    else:\n        raise ValueError(\"unknown week format: %s\" % week_format)\n",
  "name": "_get_weekday",
  "docstring": "Return the weekday for a given date.\n\nThe first day according to the week format is 0 and the last day is 6.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 194,
  "code": "def get_week_format(self):\n    \"\"\"\n    Get a week format string in strptime syntax to be used to parse the\n    week from url variables.\n    \"\"\"\n    return self.week_format\n",
  "name": "get_week_format",
  "docstring": "Get a week format string in strptime syntax to be used to parse the\nweek from url variables.",
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 30,
  "code": "def get_year(self):\n    \"\"\"\n    Return the year for which this view should display data.\n    \"\"\"\n    year = self.year\n    if year is None:\n        try:\n            year = self.kwargs['year']\n        except KeyError:\n            try:\n                year = self.request.GET['year']\n            except KeyError:\n                raise Http404(_(\"No year specified\"))\n    return year\n",
  "name": "get_year",
  "docstring": "Return the year for which this view should display data.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 23,
  "code": "def get_year_format(self):\n    \"\"\"\n    Get a year format string in strptime syntax to be used to parse the\n    year from url variables.\n    \"\"\"\n    return self.year_format\n",
  "name": "get_year_format",
  "docstring": "Get a year format string in strptime syntax to be used to parse the\nyear from url variables.",
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 195,
  "code": "def head(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "name": "head",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 88,
  "code": "def http_method_not_allowed(self, request, *args, **kwargs):\n    logger.warning('Method Not Allowed (%s): %s', request.method, request.path,\n        extra={\n            'status_code': 405,\n            'request': self.request\n        }\n    )\n    return http.HttpResponseNotAllowed(self._allowed_methods())\n",
  "name": "http_method_not_allowed",
  "docstring": "",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 32,
  "code": "def __init__(self, wizard):\n    self._wizard = wizard\n",
  "name": "__init__",
  "docstring": "",
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, wizard"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 35,
  "code": "def __init__(self, **kwargs):\n    \"\"\"\n    Constructor. Called in the URLconf; can contain helpful extra\n    keyword arguments, and other things.\n    \"\"\"\n    # Go through keyword arguments, and either save their values to our\n    # instance, or raise an error.\n    for key, value in six.iteritems(kwargs):\n        setattr(self, key, value)\n",
  "name": "__init__",
  "docstring": "Constructor. Called in the URLconf; can contain helpful extra\nkeyword arguments, and other things.",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 38,
  "code": "def __len__(self):\n    return self.count\n",
  "name": "__len__",
  "docstring": "",
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 292,
  "code": "def _make_date_lookup_arg(self, value):\n    \"\"\"\n    Convert a date into a datetime when the date field is a DateTimeField.\n    When time zone support is enabled, `date` is assumed to be in the\n    current time zone, so that displayed items are consistent with the URL.\n    \"\"\"\n    if self.uses_datetime_field:\n        value = datetime.datetime.combine(value, datetime.time.min)\n        if settings.USE_TZ:\n            value = timezone.make_aware(value, timezone.get_current_timezone())\n    return value\n",
  "name": "_make_date_lookup_arg",
  "docstring": "Convert a date into a datetime when the date field is a DateTimeField.\n\nWhen time zone support is enabled, `date` is assumed to be in the\ncurrent time zone, so that displayed items are consistent with the URL.",
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, value"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 305,
  "code": "def _make_single_date_lookup(self, date):\n    \"\"\"\n    Get the lookup kwargs for filtering on a single date.\n    If the date field is a DateTimeField, we can't just filter on\n    date_field=date because that doesn't take the time into account.\n    \"\"\"\n    date_field = self.get_date_field()\n    if self.uses_datetime_field:\n        since = self._make_date_lookup_arg(date)\n        until = self._make_date_lookup_arg(date + datetime.timedelta(days=1))\n        return {\n            '%s__gte' % date_field: since,\n            '%s__lt' % date_field: until,\n        }\n    else:\n        # Skip self._make_date_lookup_arg, it's a no-op in this branch.\n        return {date_field: date}\n",
  "name": "_make_single_date_lookup",
  "docstring": "Get the lookup kwargs for filtering on a single date.\n\nIf the date field is a DateTimeField, we can't just filter on\ndate_field=date because that doesn't take the time into account.",
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "kwargs": "self, date"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 201,
  "code": "def options(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "name": "options",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 97,
  "code": "def options(self, request, *args, **kwargs):\n    \"\"\"\n    Handles responding to requests for the OPTIONS HTTP verb.\n    \"\"\"\n    response = http.HttpResponse()\n    response['Allow'] = ', '.join(self._allowed_methods())\n    response['Content-Length'] = '0'\n    return response\n",
  "name": "options",
  "docstring": "Handles responding to requests for the OPTIONS HTTP verb.",
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 38,
  "code": "def paginate_queryset(self, queryset, page_size):\n    \"\"\"\n    Paginate the queryset, if needed.\n    \"\"\"\n    paginator = self.get_paginator(queryset, page_size, allow_empty_first_page=self.get_allow_empty())\n    page_kwarg = self.page_kwarg\n    page = self.kwargs.get(page_kwarg) or self.request.GET.get(page_kwarg) or 1\n    try:\n        page_number = int(page)\n    except ValueError:\n        if page == 'last':\n            page_number = paginator.num_pages\n        else:\n            raise Http404(_(\"Page is not 'last', nor can it be converted to an int.\"))\n    try:\n        page = paginator.page(page_number)\n        return (paginator, page, page.object_list, page.has_other_pages())\n    except InvalidPage as e:\n        raise Http404(_('Invalid page (%(page_number)s): %(message)s') % {\n                            'page_number': page_number,\n                            'message': str(e)\n        })\n",
  "name": "paginate_queryset",
  "docstring": "Paginate the queryset, if needed.",
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "kwargs": "self, queryset, page_size"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 249,
  "code": "def post(self, *args, **kwargs):\n    return self.delete(*args, **kwargs)\n",
  "name": "post",
  "docstring": "",
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 247,
  "code": "def post(self, *args, **kwargs):\n    \"\"\"\n    This method handles POST requests.\n    The wizard will render either the current step (if form validation\n    wasn't successful), the next step (if the current step was stored\n    successful) or the done view (if no more steps are available)\n    \"\"\"\n    # Look for a wizard_goto_step element in the posted data which\n    # contains a valid step name. If one was found, render the requested\n    # form. (This makes stepping back a lot easier).\n    wizard_goto_step = self.request.POST.get('wizard_goto_step', None)\n    if wizard_goto_step and wizard_goto_step in self.get_form_list():\n        self.storage.current_step = wizard_goto_step\n        form = self.get_form(\n            data=self.storage.get_step_data(self.steps.current),\n            files=self.storage.get_step_files(self.steps.current))\n        return self.render(form)\n    # Check if form was refreshed\n    management_form = ManagementForm(self.request.POST, prefix=self.prefix)\n    if not management_form.is_valid():\n        raise ValidationError(\n            'ManagementForm data is missing or has been tampered.')\n    form_current_step = management_form.cleaned_data['current_step']\n    if (form_current_step != self.steps.current and\n            self.storage.current_step is not None):\n        # form refreshed, change current step\n        self.storage.current_step = form_current_step\n    # get the form for the current step\n    form = self.get_form(data=self.request.POST, files=self.request.FILES)\n    # and try to validate\n    if form.is_valid():\n        # if the form is valid, store the cleaned data and files.\n        self.storage.set_step_data(self.steps.current, self.process_step(form))\n        self.storage.set_step_files(self.steps.current, self.process_step_files(form))\n        # check if the current step is the last step\n        if self.steps.current == self.steps.last:\n            # no more steps, render done view\n            return self.render_done(form, **kwargs)\n        else:\n            # proceed to the next step\n            return self.render_next_step(form)\n    return self.render(form)\n",
  "name": "post",
  "docstring": "This method handles POST requests.\n\nThe wizard will render either the current step (if form validation\nwasn't successful), the next step (if the current step was stored\nsuccessful) or the done view (if no more steps are available)",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 198,
  "code": "def post(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "name": "post",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 157,
  "code": "def post(self, request, *args, **kwargs):\n    \"\"\"\n    Handles POST requests, instantiating a form instance with the passed\n    POST variables and then checked for validity.\n    \"\"\"\n    form_class = self.get_form_class()\n    form = self.get_form(form_class)\n    if form.is_valid():\n        return self.form_valid(form)\n    else:\n        return self.form_invalid(form)\n",
  "name": "post",
  "docstring": "Handles POST requests, instantiating a form instance with the passed\nPOST variables and then checked for validity.",
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 648,
  "code": "def post(self, *args, **kwargs):\n    \"\"\"\n    Do a redirect if user presses the prev. step button. The rest of this\n    is super'd from WizardView.\n    \"\"\"\n    wizard_goto_step = self.request.POST.get('wizard_goto_step', None)\n    if wizard_goto_step and wizard_goto_step in self.get_form_list():\n        self.storage.current_step = wizard_goto_step\n        return redirect(self.get_step_url(wizard_goto_step))\n    return super(NamedUrlWizardView, self).post(*args, **kwargs)\n",
  "name": "post",
  "docstring": "Do a redirect if user presses the prev. step button. The rest of this\nis super'd from WizardView.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 197,
  "code": "def post(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).post(request, *args, **kwargs)\n",
  "name": "post",
  "docstring": "",
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 220,
  "code": "def post(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).post(request, *args, **kwargs)\n",
  "name": "post",
  "docstring": "",
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 401,
  "code": "def process_step(self, form):\n    \"\"\"\n    This method is used to postprocess the form data. By default, it\n    returns the raw `form.data` dictionary.\n    \"\"\"\n    return self.get_form_step_data(form)\n",
  "name": "process_step",
  "docstring": "This method is used to postprocess the form data. By default, it\nreturns the raw `form.data` dictionary.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 408,
  "code": "def process_step_files(self, form):\n    \"\"\"\n    This method is used to postprocess the form files. By default, it\n    returns the raw `form.files` dictionary.\n    \"\"\"\n    return self.get_form_step_files(form)\n",
  "name": "process_step_files",
  "docstring": "This method is used to postprocess the form files. By default, it\nreturns the raw `form.files` dictionary.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 171,
  "code": "def put(self, *args, **kwargs):\n    return self.post(*args, **kwargs)\n",
  "name": "put",
  "docstring": "",
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "kwargs": "self, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 207,
  "code": "def put(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "name": "put",
  "docstring": "",
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, request, *args, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 544,
  "code": "def render(self, form=None, **kwargs):\n    \"\"\"\n    Returns a ``HttpResponse`` containing all needed context data.\n    \"\"\"\n    form = form or self.get_form()\n    context = self.get_context_data(form=form, **kwargs)\n    return self.render_to_response(context)\n",
  "name": "render",
  "docstring": "Returns a ``HttpResponse`` containing all needed context data.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form=None, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 312,
  "code": "def render_done(self, form, **kwargs):\n    \"\"\"\n    This method gets called when all forms passed. The method should also\n    re-validate all steps to prevent manipulation. If any form don't\n    validate, `render_revalidation_failure` should get called.\n    If everything is fine call `done`.\n    \"\"\"\n    final_form_list = []\n    # walk through the form list and try to validate the data again.\n    for form_key in self.get_form_list():\n        form_obj = self.get_form(step=form_key,\n            data=self.storage.get_step_data(form_key),\n            files=self.storage.get_step_files(form_key))\n        if not form_obj.is_valid():\n            return self.render_revalidation_failure(form_key, form_obj, **kwargs)\n        final_form_list.append(form_obj)\n    # render the done view and reset the wizard before returning the\n    # response. This is needed to prevent from rendering done with the\n    # same data twice.\n    done_response = self.done(final_form_list, **kwargs)\n    self.storage.reset()\n    return done_response\n",
  "name": "render_done",
  "docstring": "This method gets called when all forms passed. The method should also\nre-validate all steps to prevent manipulation. If any form don't\nvalidate, `render_revalidation_failure` should get called.\nIf everything is fine call `done`.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 685,
  "code": "def render_done(self, form, **kwargs):\n    \"\"\"\n    When rendering the done view, we have to redirect first (if the URL\n    name doesn't fit).\n    \"\"\"\n    if kwargs.get('step', None) != self.done_step_name:\n        return redirect(self.get_step_url(self.done_step_name))\n    return super(NamedUrlWizardView, self).render_done(form, **kwargs)\n",
  "name": "render_done",
  "docstring": "When rendering the done view, we have to redirect first (if the URL\nname doesn't fit).",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 668,
  "code": "def render_next_step(self, form, **kwargs):\n    \"\"\"\n    When using the NamedUrlWizardView, we have to redirect to update the\n    browser's URL to match the shown step.\n    \"\"\"\n    next_step = self.get_next_step()\n    self.storage.current_step = next_step\n    return redirect(self.get_step_url(next_step))\n",
  "name": "render_next_step",
  "docstring": "When using the NamedUrlWizardView, we have to redirect to update the\nbrowser's URL to match the shown step.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 296,
  "code": "def render_next_step(self, form, **kwargs):\n    \"\"\"\n    This method gets called when the next step/form should be rendered.\n    `form` contains the last/current form.\n    \"\"\"\n    # get the form instance based on the data from the storage backend\n    # (if available).\n    next_step = self.steps.next\n    new_form = self.get_form(next_step,\n        data=self.storage.get_step_data(next_step),\n        files=self.storage.get_step_files(next_step))\n    # change the stored current step\n    self.storage.current_step = next_step\n    return self.render(new_form, **kwargs)\n",
  "name": "render_next_step",
  "docstring": "This method gets called when the next step/form should be rendered.\n`form` contains the last/current form.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 415,
  "code": "def render_revalidation_failure(self, step, form, **kwargs):\n    \"\"\"\n    Gets called when a form doesn't validate when rendering the done\n    view. By default, it changes the current step to failing forms step\n    and renders the form.\n    \"\"\"\n    self.storage.current_step = step\n    return self.render(form, **kwargs)\n",
  "name": "render_revalidation_failure",
  "docstring": "Gets called when a form doesn't validate when rendering the done\nview. By default, it changes the current step to failing forms step\nand renders the form.",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, step, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 677,
  "code": "def render_revalidation_failure(self, failed_step, form, **kwargs):\n    \"\"\"\n    When a step fails, we have to redirect the user to the first failing\n    step.\n    \"\"\"\n    self.storage.current_step = failed_step\n    return redirect(self.get_step_url(failed_step))\n",
  "name": "render_revalidation_failure",
  "docstring": "When a step fails, we have to redirect the user to the first failing\nstep.",
  "klass": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self, failed_step, form, **kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 118,
  "code": "def render_to_response(self, context, **response_kwargs):\n    \"\"\"\n    Returns a response, using the `response_class` for this\n    view, with a template rendered with the given context.\n    If any keyword arguments are provided, they will be\n    passed to the constructor of the response class.\n    \"\"\"\n    response_kwargs.setdefault('content_type', self.content_type)\n    return self.response_class(\n        request = self.request,\n        template = self.get_template_names(),\n        context = context,\n        **response_kwargs\n    )\n",
  "name": "render_to_response",
  "docstring": "Returns a response, using the `response_class` for this\nview, with a template rendered with the given context.\n\nIf any keyword arguments are provided, they will be\npassed to the constructor of the response class.",
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "kwargs": "self, context, **response_kwargs"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 109,
  "code": "def __repr__(self):\n    return '<%s: forms: %s>' % (self.__class__.__name__, self.form_list)\n",
  "name": "__repr__",
  "docstring": "",
  "klass": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "line_number": 41,
  "code": "def __repr__(self):\n    return '<StepsHelper for %s (steps: %s)>' % (self._wizard, self.all)\n",
  "name": "__repr__",
  "docstring": "",
  "klass": [
   "StepsHelper",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "kwargs": "self"
 },
 "model": "cbv.method",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "child": [
   "CookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "child": [
   "SessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "child": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "child": [
   "NamedUrlCookieWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "NamedUrlWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ],
  "child": [
   "NamedUrlSessionWizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "WizardView",
   "django.contrib.formtools.wizard.views",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 0,
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 1,
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 2,
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 3,
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 3,
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
},
{
 "fields": {
  "order": 4,
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.5"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.5"
  ]
 },
 "model": "cbv.inheritance",
 "pk": null
}
]
