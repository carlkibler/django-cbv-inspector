[
{
 "model": "cbv.projectversion",
 "fields": {
  "project": [
   "Django"
  ],
  "version_number": "1.10",
  "sortable_version_number": "0110"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.contrib.auth.mixins",
  "docstring": "",
  "filename": "/django/contrib/auth/mixins.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic.list",
  "docstring": "",
  "filename": "/django/views/generic/list.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic.edit",
  "docstring": "",
  "filename": "/django/views/generic/edit.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic.detail",
  "docstring": "",
  "filename": "/django/views/generic/detail.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic.dates",
  "docstring": "",
  "filename": "/django/views/generic/dates.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic.base",
  "docstring": "",
  "filename": "/django/views/generic/base.py"
 }
},
{
 "model": "cbv.module",
 "fields": {
  "project_version": [
   "Django",
   "1.10"
  ],
  "name": "django.views.generic",
  "docstring": "",
  "filename": "/django/views/generic/__init__.py"
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "logger",
  "value": "<logging.Logger object at 0x7f28f40edf90>",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "REDIRECT_FIELD_NAME",
  "value": "'next'",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "settings",
  "value": "<Settings \"inspector.settings\">",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "settings",
  "value": "<Settings \"inspector.settings\">",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "unicode_literals",
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "unicode_literals",
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "unicode_literals",
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "line_number": -1
 }
},
{
 "model": "cbv.moduleattribute",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "unicode_literals",
  "value": "_Feature((2, 6, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 131072)",
  "line_number": -1
 }
},
{
 "model": "cbv.function",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_date_from_string",
  "docstring": "Helper: get a datetime.date object given a format string and a year,\nmonth, and day (only year is mandatory). Raise a 404 for an invalid date.",
  "code": "def _date_from_string(year, year_format, month='', month_format='', day='', day_format='', delim='__'):\n    \"\"\"\n    Helper: get a datetime.date object given a format string and a year,\n    month, and day (only year is mandatory). Raise a 404 for an invalid date.\n    \"\"\"\n    format = delim.join((year_format, month_format, day_format))\n    datestr = delim.join((year, month, day))\n    try:\n        return datetime.datetime.strptime(force_str(datestr), format).date()\n    except ValueError:\n        raise Http404(_(\"Invalid date string '%(datestr)s' given format '%(format)s'\") % {\n            'datestr': datestr,\n            'format': format,\n        })\n",
  "kwargs": "year, year_format, month=u'', month_format=u'', day=u'', day_format=u'', delim=u'__'",
  "line_number": 684
 }
},
{
 "model": "cbv.function",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_next_prev",
  "docstring": "Helper: Get the next or the previous valid date. The idea is to allow\nlinks on month/day views to never be 404s by never providing a date\nthat'll be invalid for the given view.\n\nThis is a bit complicated since it handles different intervals of time,\nhence the coupling to generic_view.\n\nHowever in essence the logic comes down to:\n\n    * If allow_empty and allow_future are both true, this is easy: just\n      return the naive result (just the next/previous day/week/month,\n      regardless of object existence.)\n\n    * If allow_empty is true, allow_future is false, and the naive result\n      isn't in the future, then return it; otherwise return None.\n\n    * If allow_empty is false and allow_future is true, return the next\n      date *that contains a valid object*, even if it's in the future. If\n      there are no next objects, return None.\n\n    * If allow_empty is false and allow_future is false, return the next\n      date that contains a valid object. If that date is in the future, or\n      if there are no next objects, return None.",
  "code": "def _get_next_prev(generic_view, date, is_previous, period):\n    \"\"\"\n    Helper: Get the next or the previous valid date. The idea is to allow\n    links on month/day views to never be 404s by never providing a date\n    that'll be invalid for the given view.\n\n    This is a bit complicated since it handles different intervals of time,\n    hence the coupling to generic_view.\n\n    However in essence the logic comes down to:\n\n        * If allow_empty and allow_future are both true, this is easy: just\n          return the naive result (just the next/previous day/week/month,\n          regardless of object existence.)\n\n        * If allow_empty is true, allow_future is false, and the naive result\n          isn't in the future, then return it; otherwise return None.\n\n        * If allow_empty is false and allow_future is true, return the next\n          date *that contains a valid object*, even if it's in the future. If\n          there are no next objects, return None.\n\n        * If allow_empty is false and allow_future is false, return the next\n          date that contains a valid object. If that date is in the future, or\n          if there are no next objects, return None.\n    \"\"\"\n    date_field = generic_view.get_date_field()\n    allow_empty = generic_view.get_allow_empty()\n    allow_future = generic_view.get_allow_future()\n\n    get_current = getattr(generic_view, '_get_current_%s' % period)\n    get_next = getattr(generic_view, '_get_next_%s' % period)\n\n    # Bounds of the current interval\n    start, end = get_current(date), get_next(date)\n\n    # If allow_empty is True, the naive result will be valid\n    if allow_empty:\n        if is_previous:\n            result = get_current(start - datetime.timedelta(days=1))\n        else:\n            result = end\n\n        if allow_future or result <= timezone_today():\n            return result\n        else:\n            return None\n\n    # Otherwise, we'll need to go to the database to look for an object\n    # whose date_field is at least (greater than/less than) the given\n    # naive result\n    else:\n        # Construct a lookup and an ordering depending on whether we're doing\n        # a previous date or a next date lookup.\n        if is_previous:\n            lookup = {'%s__lt' % date_field: generic_view._make_date_lookup_arg(start)}\n            ordering = '-%s' % date_field\n        else:\n            lookup = {'%s__gte' % date_field: generic_view._make_date_lookup_arg(end)}\n            ordering = date_field\n\n        # Filter out objects in the future if appropriate.\n        if not allow_future:\n            # Fortunately, to match the implementation of allow_future,\n            # we need __lte, which doesn't conflict with __lt above.\n            if generic_view.uses_datetime_field:\n                now = timezone.now()\n            else:\n                now = timezone_today()\n            lookup['%s__lte' % date_field] = now\n\n        qs = generic_view.get_queryset().filter(**lookup).order_by(ordering)\n\n        # Snag the first object from the queryset; if it doesn't exist that\n        # means there's no next/previous link available.\n        try:\n            result = getattr(qs[0], date_field)\n        except IndexError:\n            return None\n\n        # Convert datetimes to dates in the current time zone.\n        if generic_view.uses_datetime_field:\n            if settings.USE_TZ:\n                result = timezone.localtime(result)\n            result = result.date()\n\n        # Return the first day of the period.\n        return get_current(result)\n",
  "kwargs": "generic_view, date, is_previous, period",
  "line_number": 700
 }
},
{
 "model": "cbv.function",
 "pk": null,
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "timezone_today",
  "docstring": "Return the current date in the current time zone.",
  "code": "def timezone_today():\n    \"\"\"\n    Return the current date in the current time zone.\n    \"\"\"\n    if settings.USE_TZ:\n        return timezone.localtime(timezone.now()).date()\n    else:\n        return datetime.date.today()\n",
  "kwargs": "",
  "line_number": 790
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "AccessMixin",
  "docstring": "Abstract CBV mixin that gives access mixins the same customizable\nfunctionality.",
  "line_number": 9,
  "import_path": "django.contrib.auth.mixins",
  "docs_url": "https://docs.djangoproject.com/en/1.10/topics/auth/default/#django.contrib.auth.mixins.AccessMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "LoginRequiredMixin",
  "docstring": "CBV mixin which verifies that the current user is authenticated.",
  "line_number": 49,
  "import_path": "django.contrib.auth.mixins",
  "docs_url": "https://docs.djangoproject.com/en/1.10/topics/auth/default/#django.contrib.auth.mixins.LoginRequiredMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "PermissionRequiredMixin",
  "docstring": "CBV mixin which verifies that the current user has all specified\npermissions.",
  "line_number": 59,
  "import_path": "django.contrib.auth.mixins",
  "docs_url": "https://docs.djangoproject.com/en/1.10/topics/auth/default/#django.contrib.auth.mixins.PermissionRequiredMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "UserPassesTestMixin",
  "docstring": "CBV Mixin that allows you to define a test function which must return True\nif the current user can access the view.",
  "line_number": 95,
  "import_path": "django.contrib.auth.mixins",
  "docs_url": "https://docs.djangoproject.com/en/1.10/topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "GenericViewError",
  "docstring": "A problem in a generic view.",
  "line_number": 20,
  "import_path": "django.views.generic",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "ContextMixin",
  "docstring": "A default context mixin that passes the keyword arguments received by\nget_context_data as the template context.",
  "line_number": 16,
  "import_path": "django.views.generic.base",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "RedirectView",
  "docstring": "A view that provides a redirect on any GET request.",
  "line_number": 159,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#django.views.generic.base.RedirectView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "TemplateResponseMixin",
  "docstring": "A mixin that can be used to render a template.",
  "line_number": 110,
  "import_path": "django.views.generic.base",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "TemplateView",
  "docstring": "A view that renders a template.  This view will also pass into the context\nany keyword arguments passed by the URLconf.",
  "line_number": 149,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#django.views.generic.base.TemplateView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "View",
  "docstring": "Intentionally simple parent class for all views. Only implements\ndispatch-by-method and simple sanity checking.",
  "line_number": 28,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/base/#django.views.generic.base.View"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "ArchiveIndexView",
  "docstring": "Top-level archive of date-based items.",
  "line_number": 433,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.ArchiveIndexView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseArchiveIndexView",
  "docstring": "Base class for archives of date-based items.\n\nRequires a response mixin.",
  "line_number": 412,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseArchiveIndexView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseDateDetailView",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "line_number": 639,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseDateDetailView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseDateListView",
  "docstring": "Abstract base class for date-based views displaying a list of objects.",
  "line_number": 331,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.BaseDateListView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseDayArchiveView",
  "docstring": "List of objects published on a given day.",
  "line_number": 578,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseDayArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseMonthArchiveView",
  "docstring": "List of objects published in a given month.",
  "line_number": 492,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseMonthArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseTodayArchiveView",
  "docstring": "List of objects published today.",
  "line_number": 620,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseTodayArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseWeekArchiveView",
  "docstring": "List of objects published in a given week.",
  "line_number": 533,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseWeekArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "BaseYearArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 440,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.BaseYearArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "DateDetailView",
  "docstring": "Detail view of a single object on a single date; this differs from the\nstandard DetailView by accepting a year/month/day in the URL.",
  "line_number": 676,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.DateDetailView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "DateMixin",
  "docstring": "Mixin class for views manipulating date-based data.",
  "line_number": 263,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.DateMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "DayArchiveView",
  "docstring": "List of objects published on a given day.",
  "line_number": 613,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.DayArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "DayMixin",
  "docstring": "Mixin for views manipulating day-based data.",
  "line_number": 137,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.DayMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "MonthArchiveView",
  "docstring": "List of objects published in a given month.",
  "line_number": 526,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.MonthArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "MonthMixin",
  "docstring": "Mixin for views manipulating month-based data.",
  "line_number": 78,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.MonthMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "TodayArchiveView",
  "docstring": "List of objects published today.",
  "line_number": 632,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.TodayArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "WeekArchiveView",
  "docstring": "List of objects published in a given week.",
  "line_number": 571,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.WeekArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "WeekMixin",
  "docstring": "Mixin for views manipulating week-based data.",
  "line_number": 193,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.WeekMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "YearArchiveView",
  "docstring": "List of objects published in a given year.",
  "line_number": 485,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-date-based/#django.views.generic.dates.YearArchiveView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "YearMixin",
  "docstring": "Mixin for views manipulating year-based data.",
  "line_number": 22,
  "import_path": "django.views.generic.dates",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-date-based/#django.views.generic.dates.YearMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "BaseDetailView",
  "docstring": "A base view for displaying a single object",
  "line_number": 110,
  "import_path": "django.views.generic.detail",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "DetailView",
  "docstring": "Render a \"detail\" view of an object.\n\nBy default this is a model instance looked up from `self.queryset`, but the\nview will support display of *any* object by overriding `self.get_object()`.",
  "line_number": 173,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#django.views.generic.detail.DetailView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "SingleObjectMixin",
  "docstring": "Provides the ability to retrieve a single object for further manipulation.",
  "line_number": 10,
  "import_path": "django.views.generic.detail",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "SingleObjectTemplateResponseMixin",
  "docstring": "",
  "line_number": 120,
  "import_path": "django.views.generic.detail",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "BaseCreateView",
  "docstring": "Base view for creating an new object instance.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 205,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "BaseDeleteView",
  "docstring": "Base view for deleting an object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 279,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "BaseFormView",
  "docstring": "A base view for displaying a form",
  "line_number": 193,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "BaseUpdateView",
  "docstring": "Base view for updating an existing object.\n\nUsing this base class requires subclassing to provide a response mixin.",
  "line_number": 228,
  "import_path": "django.views.generic.edit",
  "docs_url": ""
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "CreateView",
  "docstring": "View for creating a new object instance,\nwith a response rendered by template.",
  "line_number": 220,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "DeleteView",
  "docstring": "View for deleting an object retrieved with `self.get_object()`,\nwith a response rendered by template.",
  "line_number": 287,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "DeletionMixin",
  "docstring": "A mixin providing the ability to delete objects",
  "line_number": 251,
  "import_path": "django.views.generic.edit",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-editing/#django.views.generic.edit.DeletionMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "FormMixin",
  "docstring": "A mixin that provides a way to show and handle a form in a request.",
  "line_number": 11,
  "import_path": "django.views.generic.edit",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "FormView",
  "docstring": "A view for displaying a form, and rendering a template response.",
  "line_number": 199,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-editing/#django.views.generic.edit.FormView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "ModelFormMixin",
  "docstring": "A mixin that provides a way to show and handle a modelform in a request.",
  "line_number": 97,
  "import_path": "django.views.generic.edit",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "ProcessFormView",
  "docstring": "A mixin that renders a form on GET and processes it on POST.",
  "line_number": 166,
  "import_path": "django.views.generic.edit",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-editing/#django.views.generic.edit.ProcessFormView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "UpdateView",
  "docstring": "View for updating an object,\nwith a response rendered by template.",
  "line_number": 243,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-editing/#django.views.generic.edit.UpdateView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "BaseListView",
  "docstring": "A base view for displaying a list of objects.",
  "line_number": 154,
  "import_path": "django.views.generic.list",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#django.views.generic.list.BaseListView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "ListView",
  "docstring": "Render some list of objects, set by `self.model` or `self.queryset`.\n`self.queryset` can actually be any iterable of items, not just a queryset.",
  "line_number": 207,
  "import_path": "django.views.generic",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/generic-display/#django.views.generic.list.ListView"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "MultipleObjectMixin",
  "docstring": "A mixin for views manipulating multiple objects.",
  "line_number": 12,
  "import_path": "django.views.generic.list",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin"
 }
},
{
 "model": "cbv.klass",
 "fields": {
  "module": [
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "MultipleObjectTemplateResponseMixin",
  "docstring": "Mixin for responding with a template and list of objects.",
  "line_number": 178,
  "import_path": "django.views.generic.list",
  "docs_url": "https://docs.djangoproject.com/en/1.10/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectTemplateResponseMixin"
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "allow_empty",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "allow_empty",
  "value": "True",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "allow_future",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "args",
  "value": "<attribute 'args' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "content_type",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "context_object_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "context_object_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "context_object_name",
  "value": "'latest'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "date_field",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "date_list_period",
  "value": "'year'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "date_list_period",
  "value": "'day'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "date_list_period",
  "value": "'month'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "day",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "day_format",
  "value": "'%d'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__delattr__",
  "value": "<slot wrapper '__delattr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "fields",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "form_class",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__getattribute__",
  "value": "<slot wrapper '__getattribute__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__getitem__",
  "value": "<slot wrapper '__getitem__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__getslice__",
  "value": "<slot wrapper '__getslice__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "http_method_names",
  "value": "[u'get', u'post', u'put', u'patch', u'delete', u'head', u'options', u'trace']",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__init__",
  "value": "<slot wrapper '__init__' of 'exceptions.Exception' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "initial",
  "value": "{}",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "login_url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "make_object_list",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "message",
  "value": "<attribute 'message' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "model",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "model",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "month",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "month_format",
  "value": "'%b'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "ordering",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "page_kwarg",
  "value": "'page'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "paginate_by",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "paginate_orphans",
  "value": "0",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "paginator_class",
  "value": "<class 'django.core.paginator.Paginator'>",
  "line_number": 20
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "pattern_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "permanent",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "permission_denied_message",
  "value": "''",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "PermissionRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "permission_required",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "pk_url_kwarg",
  "value": "'pk'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "prefix",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "query_pk_and_slug",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "queryset",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "queryset",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "query_string",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "raise_exception",
  "value": "False",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "redirect_field_name",
  "value": "'next'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__reduce__",
  "value": "<method '__reduce__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__repr__",
  "value": "<slot wrapper '__repr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "response_class",
  "value": "<class 'django.template.response.TemplateResponse'>",
  "line_number": 143
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__setattr__",
  "value": "<slot wrapper '__setattr__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__setstate__",
  "value": "<method '__setstate__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "slug_field",
  "value": "'slug'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "slug_url_kwarg",
  "value": "'slug'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__str__",
  "value": "<slot wrapper '__str__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "success_url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "success_url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "template_engine",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "template_name",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "template_name_field",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_form'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_day'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_year'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_detail'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_confirm_delete'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_day'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_month'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_archive_week'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_form'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "template_name_suffix",
  "value": "'_list'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "GenericViewError",
   "django.views.generic",
   "Django",
   "1.10"
  ],
  "name": "__unicode__",
  "value": "<method '__unicode__' of 'exceptions.BaseException' objects>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "url",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "uses_datetime_field",
  "value": "<django.utils.functional.cached_property object at 0x7f28f4084f50>",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "week",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "week_format",
  "value": "'%U'",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "year",
  "value": "None",
  "line_number": -1
 }
},
{
 "model": "cbv.klassattribute",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "year_format",
  "value": "'%Y'",
  "line_number": -1
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "_allowed_methods",
  "docstring": "",
  "code": "def _allowed_methods(self):\n    return [m.upper() for m in self.http_method_names if hasattr(self, m)]\n",
  "kwargs": "self",
  "line_number": 106
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "as_view",
  "docstring": "Main entry point for a request-response process.",
  "code": "@classonlymethod\ndef as_view(cls, **initkwargs):\n    \"\"\"\n    Main entry point for a request-response process.\n    \"\"\"\n    for key in initkwargs:\n        if key in cls.http_method_names:\n            raise TypeError(\"You tried to pass in the %s method name as a \"\n                            \"keyword argument to %s(). Don't do that.\"\n                            % (key, cls.__name__))\n        if not hasattr(cls, key):\n            raise TypeError(\"%s() received an invalid keyword %r. as_view \"\n                            \"only accepts arguments that are already \"\n                            \"attributes of the class.\" % (cls.__name__, key))\n    def view(request, *args, **kwargs):\n        self = cls(**initkwargs)\n        if hasattr(self, 'get') and not hasattr(self, 'head'):\n            self.head = self.get\n        self.request = request\n        self.args = args\n        self.kwargs = kwargs\n        return self.dispatch(request, *args, **kwargs)\n    view.view_class = cls\n    view.view_initkwargs = initkwargs\n    # take name and docstring from class\n    update_wrapper(view, cls, updated=())\n    # and possible attributes set by decorators\n    # like csrf_exempt from dispatch\n    update_wrapper(view, cls.dispatch, assigned=())\n    return view\n",
  "kwargs": "cls, **initkwargs",
  "line_number": 46
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "delete",
  "docstring": "",
  "code": "def delete(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 212
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "delete",
  "docstring": "Calls the delete() method on the fetched object and then\nredirects to the success URL.",
  "code": "def delete(self, request, *args, **kwargs):\n    \"\"\"\n    Calls the delete() method on the fetched object and then\n    redirects to the success URL.\n    \"\"\"\n    self.object = self.get_object()\n    success_url = self.get_success_url()\n    self.object.delete()\n    return HttpResponseRedirect(success_url)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 257
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "LoginRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "dispatch",
  "docstring": "",
  "code": "def dispatch(self, request, *args, **kwargs):\n    if not request.user.is_authenticated:\n        return self.handle_no_permission()\n    return super(LoginRequiredMixin, self).dispatch(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 53
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "UserPassesTestMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "dispatch",
  "docstring": "",
  "code": "def dispatch(self, request, *args, **kwargs):\n    user_test_result = self.get_test_func()()\n    if not user_test_result:\n        return self.handle_no_permission()\n    return super(UserPassesTestMixin, self).dispatch(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 112
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "dispatch",
  "docstring": "",
  "code": "def dispatch(self, request, *args, **kwargs):\n    # Try to dispatch to the right method; if a method doesn't exist,\n    # defer to the error handler. Also defer to the error handler if the\n    # request method isn't on the approved list.\n    if request.method.lower() in self.http_method_names:\n        handler = getattr(self, request.method.lower(), self.http_method_not_allowed)\n    else:\n        handler = self.http_method_not_allowed\n    return handler(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 80
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "PermissionRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "dispatch",
  "docstring": "",
  "code": "def dispatch(self, request, *args, **kwargs):\n    if not self.has_permission():\n        return self.handle_no_permission()\n    return super(PermissionRequiredMixin, self).dispatch(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 89
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "form_invalid",
  "docstring": "If the form is invalid, re-render the context data with the\ndata-filled form and errors.",
  "code": "def form_invalid(self, form):\n    \"\"\"\n    If the form is invalid, re-render the context data with the\n    data-filled form and errors.\n    \"\"\"\n    return self.render_to_response(self.get_context_data(form=form))\n",
  "kwargs": "self, form",
  "line_number": 81
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "form_valid",
  "docstring": "If the form is valid, redirect to the supplied URL.",
  "code": "def form_valid(self, form):\n    \"\"\"\n    If the form is valid, redirect to the supplied URL.\n    \"\"\"\n    return HttpResponseRedirect(self.get_success_url())\n",
  "kwargs": "self, form",
  "line_number": 75
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "form_valid",
  "docstring": "If the form is valid, save the associated model.",
  "code": "def form_valid(self, form):\n    \"\"\"\n    If the form is valid, save the associated model.\n    \"\"\"\n    self.object = form.save()\n    return super(ModelFormMixin, self).form_valid(form)\n",
  "kwargs": "self, form",
  "line_number": 158
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "Handles GET requests and instantiates a blank version of the form.",
  "code": "def get(self, request, *args, **kwargs):\n    \"\"\"\n    Handles GET requests and instantiates a blank version of the form.\n    \"\"\"\n    return self.render_to_response(self.get_context_data())\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 170
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object_list = self.get_queryset()\n    allow_empty = self.get_allow_empty()\n    if not allow_empty:\n        # When pagination is enabled and object_list is a queryset,\n        # it's better to do a cheap query than to load the unpaginated\n        # queryset in memory.\n        if self.get_paginate_by(self.object_list) is not None and hasattr(self.object_list, 'exists'):\n            is_empty = not self.object_list.exists()\n        else:\n            is_empty = len(self.object_list) == 0\n        if is_empty:\n            raise Http404(_(\"Empty list and '%(class_name)s.allow_empty' is False.\") % {\n                'class_name': self.__class__.__name__,\n            })\n    context = self.get_context_data()\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 158
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 234
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 211
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    context = self.get_context_data(object=self.object)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 114
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    self.date_list, self.object_list, extra_context = self.get_dated_items()\n    context = self.get_context_data(object_list=self.object_list,\n                                    date_list=self.date_list)\n    context.update(extra_context)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 338
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    context = self.get_context_data(**kwargs)\n    return self.render_to_response(context)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 154
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "get",
  "docstring": "",
  "code": "def get(self, request, *args, **kwargs):\n    url = self.get_redirect_url(*args, **kwargs)\n    if url:\n        if self.permanent:\n            return http.HttpResponsePermanentRedirect(url)\n        else:\n            return http.HttpResponseRedirect(url)\n    else:\n        logger.warning(\n            'Gone: %s', request.path,\n            extra={'status_code': 410, 'request': request}\n        )\n        return http.HttpResponseGone()\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 189
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_allow_empty",
  "docstring": "Returns ``True`` if the view should display empty lists, and ``False``\nif a 404 should be raised instead.",
  "code": "def get_allow_empty(self):\n    \"\"\"\n    Returns ``True`` if the view should display empty lists, and ``False``\n    if a 404 should be raised instead.\n    \"\"\"\n    return self.allow_empty\n",
  "kwargs": "self",
  "line_number": 108
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_allow_future",
  "docstring": "Returns `True` if the view should be allowed to display objects from\nthe future.",
  "code": "def get_allow_future(self):\n    \"\"\"\n    Returns `True` if the view should be allowed to display objects from\n    the future.\n    \"\"\"\n    return self.allow_future\n",
  "kwargs": "self",
  "line_number": 278
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_context_data",
  "docstring": "Get the context for this view.",
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Get the context for this view.\n    \"\"\"\n    queryset = kwargs.pop('object_list', self.object_list)\n    page_size = self.get_paginate_by(queryset)\n    context_object_name = self.get_context_object_name(queryset)\n    if page_size:\n        paginator, page, queryset, is_paginated = self.paginate_queryset(queryset, page_size)\n        context = {\n            'paginator': paginator,\n            'page_obj': page,\n            'is_paginated': is_paginated,\n            'object_list': queryset\n        }\n    else:\n        context = {\n            'paginator': None,\n            'page_obj': None,\n            'is_paginated': False,\n            'object_list': queryset\n        }\n    if context_object_name is not None:\n        context[context_object_name] = queryset\n    context.update(kwargs)\n    return super(MultipleObjectMixin, self).get_context_data(**context)\n",
  "kwargs": "self, **kwargs",
  "line_number": 126
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "get_context_data",
  "docstring": "",
  "code": "def get_context_data(self, **kwargs):\n    if 'view' not in kwargs:\n        kwargs['view'] = self\n    return kwargs\n",
  "kwargs": "self, **kwargs",
  "line_number": 22
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_context_data",
  "docstring": "Insert the form into the context dict.",
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Insert the form into the context dict.\n    \"\"\"\n    if 'form' not in kwargs:\n        kwargs['form'] = self.get_form()\n    return super(FormMixin, self).get_context_data(**kwargs)\n",
  "kwargs": "self, **kwargs",
  "line_number": 88
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_context_data",
  "docstring": "Insert the single object into the context dict.",
  "code": "def get_context_data(self, **kwargs):\n    \"\"\"\n    Insert the single object into the context dict.\n    \"\"\"\n    context = {}\n    if self.object:\n        context['object'] = self.object\n        context_object_name = self.get_context_object_name(self.object)\n        if context_object_name:\n            context[context_object_name] = self.object\n    context.update(kwargs)\n    return super(SingleObjectMixin, self).get_context_data(**context)\n",
  "kwargs": "self, **kwargs",
  "line_number": 96
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_context_object_name",
  "docstring": "Get the name to use for the object.",
  "code": "def get_context_object_name(self, obj):\n    \"\"\"\n    Get the name to use for the object.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif isinstance(obj, models.Model):\n        return obj._meta.model_name\n    else:\n        return None\n",
  "kwargs": "self, obj",
  "line_number": 85
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_context_object_name",
  "docstring": "Get the name of the item to be used in the context.",
  "code": "def get_context_object_name(self, object_list):\n    \"\"\"\n    Get the name of the item to be used in the context.\n    \"\"\"\n    if self.context_object_name:\n        return self.context_object_name\n    elif hasattr(object_list, 'model'):\n        return '%s_list' % object_list.model._meta.model_name\n    else:\n        return None\n",
  "kwargs": "self, object_list",
  "line_number": 115
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_current_day",
  "docstring": "Return the start date of the current interval.",
  "code": "def _get_current_day(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date\n",
  "kwargs": "self, date",
  "line_number": 186
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_current_month",
  "docstring": "Return the start date of the previous interval.",
  "code": "def _get_current_month(self, date):\n    \"\"\"\n    Return the start date of the previous interval.\n    \"\"\"\n    return date.replace(day=1)\n",
  "kwargs": "self, date",
  "line_number": 130
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_current_week",
  "docstring": "Return the start date of the current interval.",
  "code": "def _get_current_week(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date - datetime.timedelta(self._get_weekday(date))\n",
  "kwargs": "self, date",
  "line_number": 242
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_current_year",
  "docstring": "Return the start date of the current interval.",
  "code": "def _get_current_year(self, date):\n    \"\"\"\n    Return the start date of the current interval.\n    \"\"\"\n    return date.replace(month=1, day=1)\n",
  "kwargs": "self, date",
  "line_number": 71
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_dated_items",
  "docstring": "Do the actual heavy lifting of getting the dated items; this accepts a\ndate object so that TodayArchiveView can be trivial.",
  "code": "def _get_dated_items(self, date):\n    \"\"\"\n    Do the actual heavy lifting of getting the dated items; this accepts a\n    date object so that TodayArchiveView can be trivial.\n    \"\"\"\n    lookup_kwargs = self._make_single_date_lookup(date)\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'day': date,\n        'previous_day': self.get_previous_day(date),\n        'next_day': self.get_next_day(date),\n        'previous_month': self.get_previous_month(date),\n        'next_month': self.get_next_month(date)\n    })\n",
  "kwargs": "self, date",
  "line_number": 596
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format())\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_month(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    date_list = self.get_date_list(qs)\n    return (date_list, qs, {\n        'month': date,\n        'next_month': self.get_next_month(date),\n        'previous_month': self.get_previous_month(date),\n    })\n",
  "kwargs": "self",
  "line_number": 498
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    return self._get_dated_items(date)\n",
  "kwargs": "self",
  "line_number": 582
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    date_field = self.get_date_field()\n    date = _date_from_string(year, self.get_year_format())\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_year(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    date_list = self.get_date_list(qs)\n    if not self.get_make_object_list():\n        # We need this to be a queryset since parent classes introspect it\n        # to find information about the model.\n        qs = qs.none()\n    return (date_list, qs, {\n        'year': date,\n        'next_year': self.get_next_year(date),\n        'previous_year': self.get_previous_year(date),\n    })\n",
  "kwargs": "self",
  "line_number": 447
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    qs = self.get_dated_queryset()\n    date_list = self.get_date_list(qs, ordering='DESC')\n    if not date_list:\n        qs = qs.none()\n    return (date_list, qs, {})\n",
  "kwargs": "self",
  "line_number": 420
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    return self._get_dated_items(datetime.date.today())\n",
  "kwargs": "self",
  "line_number": 625
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Return (date_list, items, extra_context) for this request.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Return (date_list, items, extra_context) for this request.\n    \"\"\"\n    year = self.get_year()\n    week = self.get_week()\n    date_field = self.get_date_field()\n    week_format = self.get_week_format()\n    week_start = {\n        '%W': '1',\n        '%U': '0',\n    }[week_format]\n    date = _date_from_string(year, self.get_year_format(),\n                             week_start, '%w',\n                             week, week_format)\n    since = self._make_date_lookup_arg(date)\n    until = self._make_date_lookup_arg(self._get_next_week(date))\n    lookup_kwargs = {\n        '%s__gte' % date_field: since,\n        '%s__lt' % date_field: until,\n    }\n    qs = self.get_dated_queryset(**lookup_kwargs)\n    return (None, qs, {\n        'week': date,\n        'next_week': self.get_next_week(date),\n        'previous_week': self.get_previous_week(date),\n    })\n",
  "kwargs": "self",
  "line_number": 538
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_items",
  "docstring": "Obtain the list of dates and items.",
  "code": "def get_dated_items(self):\n    \"\"\"\n    Obtain the list of dates and items.\n    \"\"\"\n    raise NotImplementedError('A DateView must provide an implementation of get_dated_items()')\n",
  "kwargs": "self",
  "line_number": 345
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_dated_queryset",
  "docstring": "Get a queryset properly filtered according to `allow_future` and any\nextra lookup kwargs.",
  "code": "def get_dated_queryset(self, **lookup):\n    \"\"\"\n    Get a queryset properly filtered according to `allow_future` and any\n    extra lookup kwargs.\n    \"\"\"\n    qs = self.get_queryset().filter(**lookup)\n    date_field = self.get_date_field()\n    allow_future = self.get_allow_future()\n    allow_empty = self.get_allow_empty()\n    paginate_by = self.get_paginate_by(qs)\n    if not allow_future:\n        now = timezone.now() if self.uses_datetime_field else timezone_today()\n        qs = qs.filter(**{'%s__lte' % date_field: now})\n    if not allow_empty:\n        # When pagination is enabled, it's better to do a cheap query\n        # than to load the unpaginated queryset in memory.\n        is_empty = len(qs) == 0 if paginate_by is None else not qs.exists()\n        if is_empty:\n            raise Http404(_(\"No %(verbose_name_plural)s available\") % {\n                'verbose_name_plural': force_text(qs.model._meta.verbose_name_plural)\n            })\n    return qs\n",
  "kwargs": "self, **lookup",
  "line_number": 358
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_date_field",
  "docstring": "Get the name of the date field to be used to filter by.",
  "code": "def get_date_field(self):\n    \"\"\"\n    Get the name of the date field to be used to filter by.\n    \"\"\"\n    if self.date_field is None:\n        raise ImproperlyConfigured(\"%s.date_field is required.\" % self.__class__.__name__)\n    return self.date_field\n",
  "kwargs": "self",
  "line_number": 270
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_date_list",
  "docstring": "Get a date list by calling `queryset.dates/datetimes()`, checking\nalong the way for empty lists that aren't allowed.",
  "code": "def get_date_list(self, queryset, date_type=None, ordering='ASC'):\n    \"\"\"\n    Get a date list by calling `queryset.dates/datetimes()`, checking\n    along the way for empty lists that aren't allowed.\n    \"\"\"\n    date_field = self.get_date_field()\n    allow_empty = self.get_allow_empty()\n    if date_type is None:\n        date_type = self.get_date_list_period()\n    if self.uses_datetime_field:\n        date_list = queryset.datetimes(date_field, date_type, ordering)\n    else:\n        date_list = queryset.dates(date_field, date_type, ordering)\n    if date_list is not None and not date_list and not allow_empty:\n        name = force_text(queryset.model._meta.verbose_name_plural)\n        raise Http404(_(\"No %(verbose_name_plural)s available\") %\n                      {'verbose_name_plural': name})\n    return date_list\n",
  "kwargs": "self, queryset, date_type=None, ordering=u'ASC'",
  "line_number": 390
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_date_list_period",
  "docstring": "Get the aggregation period for the list of dates: 'year', 'month', or 'day'.",
  "code": "def get_date_list_period(self):\n    \"\"\"\n    Get the aggregation period for the list of dates: 'year', 'month', or 'day'.\n    \"\"\"\n    return self.date_list_period\n",
  "kwargs": "self",
  "line_number": 384
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_day",
  "docstring": "Return the day for which this view should display data.",
  "code": "def get_day(self):\n    \"\"\"\n    Return the day for which this view should display data.\n    \"\"\"\n    day = self.day\n    if day is None:\n        try:\n            day = self.kwargs['day']\n        except KeyError:\n            try:\n                day = self.request.GET['day']\n            except KeyError:\n                raise Http404(_(\"No day specified\"))\n    return day\n",
  "kwargs": "self",
  "line_number": 151
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_day_format",
  "docstring": "Get a day format string in strptime syntax to be used to parse the day\nfrom url variables.",
  "code": "def get_day_format(self):\n    \"\"\"\n    Get a day format string in strptime syntax to be used to parse the day\n    from url variables.\n    \"\"\"\n    return self.day_format\n",
  "kwargs": "self",
  "line_number": 144
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_form",
  "docstring": "Returns an instance of the form to be used in this view.",
  "code": "def get_form(self, form_class=None):\n    \"\"\"\n    Returns an instance of the form to be used in this view.\n    \"\"\"\n    if form_class is None:\n        form_class = self.get_form_class()\n    return form_class(**self.get_form_kwargs())\n",
  "kwargs": "self, form_class=None",
  "line_number": 39
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view",
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view\n    \"\"\"\n    return self.form_class\n",
  "kwargs": "self",
  "line_number": 33
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_form_class",
  "docstring": "Returns the form class to use in this view.",
  "code": "def get_form_class(self):\n    \"\"\"\n    Returns the form class to use in this view.\n    \"\"\"\n    if self.fields is not None and self.form_class:\n        raise ImproperlyConfigured(\n            \"Specifying both 'fields' and 'form_class' is not permitted.\"\n        )\n    if self.form_class:\n        return self.form_class\n    else:\n        if self.model is not None:\n            # If a model has been explicitly provided, use it\n            model = self.model\n        elif hasattr(self, 'object') and self.object is not None:\n            # If this view is operating on a single object, use\n            # the class of that object\n            model = self.object.__class__\n        else:\n            # Try to get a queryset and extract the model class\n            # from that\n            model = self.get_queryset().model\n        if self.fields is None:\n            raise ImproperlyConfigured(\n                \"Using ModelFormMixin (base class of %s) without \"\n                \"the 'fields' attribute is prohibited.\" % self.__class__.__name__\n            )\n        return model_forms.modelform_factory(model, fields=self.fields)\n",
  "kwargs": "self",
  "line_number": 103
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form.",
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form.\n    \"\"\"\n    kwargs = super(ModelFormMixin, self).get_form_kwargs()\n    if hasattr(self, 'object'):\n        kwargs.update({'instance': self.object})\n    return kwargs\n",
  "kwargs": "self",
  "line_number": 134
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_form_kwargs",
  "docstring": "Returns the keyword arguments for instantiating the form.",
  "code": "def get_form_kwargs(self):\n    \"\"\"\n    Returns the keyword arguments for instantiating the form.\n    \"\"\"\n    kwargs = {\n        'initial': self.get_initial(),\n        'prefix': self.get_prefix(),\n    }\n    if self.request.method in ('POST', 'PUT'):\n        kwargs.update({\n            'data': self.request.POST,\n            'files': self.request.FILES,\n        })\n    return kwargs\n",
  "kwargs": "self",
  "line_number": 47
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_initial",
  "docstring": "Returns the initial data to use for forms on this view.",
  "code": "def get_initial(self):\n    \"\"\"\n    Returns the initial data to use for forms on this view.\n    \"\"\"\n    return self.initial.copy()\n",
  "kwargs": "self",
  "line_number": 21
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "get_login_url",
  "docstring": "Override this method to override the login_url attribute.",
  "code": "def get_login_url(self):\n    \"\"\"\n    Override this method to override the login_url attribute.\n    \"\"\"\n    login_url = self.login_url or settings.LOGIN_URL\n    if not login_url:\n        raise ImproperlyConfigured(\n            '{0} is missing the login_url attribute. Define {0}.login_url, settings.LOGIN_URL, or override '\n            '{0}.get_login_url().'.format(self.__class__.__name__)\n        )\n    return force_text(login_url)\n",
  "kwargs": "self",
  "line_number": 19
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_make_object_list",
  "docstring": "Return `True` if this view should contain the full list of objects in\nthe given year.",
  "code": "def get_make_object_list(self):\n    \"\"\"\n    Return `True` if this view should contain the full list of objects in\n    the given year.\n    \"\"\"\n    return self.make_object_list\n",
  "kwargs": "self",
  "line_number": 477
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_month",
  "docstring": "Return the month for which this view should display data.",
  "code": "def get_month(self):\n    \"\"\"\n    Return the month for which this view should display data.\n    \"\"\"\n    month = self.month\n    if month is None:\n        try:\n            month = self.kwargs['month']\n        except KeyError:\n            try:\n                month = self.request.GET['month']\n            except KeyError:\n                raise Http404(_(\"No month specified\"))\n    return month\n",
  "kwargs": "self",
  "line_number": 92
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_month_format",
  "docstring": "Get a month format string in strptime syntax to be used to parse the\nmonth from url variables.",
  "code": "def get_month_format(self):\n    \"\"\"\n    Get a month format string in strptime syntax to be used to parse the\n    month from url variables.\n    \"\"\"\n    return self.month_format\n",
  "kwargs": "self",
  "line_number": 85
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_next_day",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "code": "def _get_next_day(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date + datetime.timedelta(days=1)\n",
  "kwargs": "self, date",
  "line_number": 178
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_next_day",
  "docstring": "Get the next valid day.",
  "code": "def get_next_day(self, date):\n    \"\"\"\n    Get the next valid day.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='day')\n",
  "kwargs": "self, date",
  "line_number": 166
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_next_month",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "code": "def _get_next_month(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    if date.month == 12:\n        return date.replace(year=date.year + 1, month=1, day=1)\n    else:\n        return date.replace(month=date.month + 1, day=1)\n",
  "kwargs": "self, date",
  "line_number": 119
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_next_month",
  "docstring": "Get the next valid month.",
  "code": "def get_next_month(self, date):\n    \"\"\"\n    Get the next valid month.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='month')\n",
  "kwargs": "self, date",
  "line_number": 107
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_next_week",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "code": "def _get_next_week(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date + datetime.timedelta(days=7 - self._get_weekday(date))\n",
  "kwargs": "self, date",
  "line_number": 234
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_next_week",
  "docstring": "Get the next valid week.",
  "code": "def get_next_week(self, date):\n    \"\"\"\n    Get the next valid week.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='week')\n",
  "kwargs": "self, date",
  "line_number": 222
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_next_year",
  "docstring": "Return the start date of the next interval.\n\nThe interval is defined by start date <= item date < next start date.",
  "code": "def _get_next_year(self, date):\n    \"\"\"\n    Return the start date of the next interval.\n    The interval is defined by start date <= item date < next start date.\n    \"\"\"\n    return date.replace(year=date.year + 1, month=1, day=1)\n",
  "kwargs": "self, date",
  "line_number": 63
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_next_year",
  "docstring": "Get the next valid year.",
  "code": "def get_next_year(self, date):\n    \"\"\"\n    Get the next valid year.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=False, period='year')\n",
  "kwargs": "self, date",
  "line_number": 51
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_object",
  "docstring": "Returns the object the view is displaying.\n\nBy default this requires `self.queryset` and a `pk` or `slug` argument\nin the URLconf, but subclasses can override this to return any object.",
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Returns the object the view is displaying.\n    By default this requires `self.queryset` and a `pk` or `slug` argument\n    in the URLconf, but subclasses can override this to return any object.\n    \"\"\"\n    # Use a custom queryset if provided; this is required for subclasses\n    # like DateDetailView\n    if queryset is None:\n        queryset = self.get_queryset()\n    # Next, try looking up by primary key.\n    pk = self.kwargs.get(self.pk_url_kwarg)\n    slug = self.kwargs.get(self.slug_url_kwarg)\n    if pk is not None:\n        queryset = queryset.filter(pk=pk)\n    # Next, try looking up by slug.\n    if slug is not None and (pk is None or self.query_pk_and_slug):\n        slug_field = self.get_slug_field()\n        queryset = queryset.filter(**{slug_field: slug})\n    # If none of those are defined, it's an error.\n    if pk is None and slug is None:\n        raise AttributeError(\"Generic detail view %s must be called with \"\n                             \"either an object pk or a slug.\"\n                             % self.__class__.__name__)\n    try:\n        # Get the single item from the filtered queryset\n        obj = queryset.get()\n    except queryset.model.DoesNotExist:\n        raise Http404(_(\"No %(verbose_name)s found matching the query\") %\n                      {'verbose_name': queryset.model._meta.verbose_name})\n    return obj\n",
  "kwargs": "self, queryset=None",
  "line_number": 22
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_object",
  "docstring": "Get the object this request displays.",
  "code": "def get_object(self, queryset=None):\n    \"\"\"\n    Get the object this request displays.\n    \"\"\"\n    year = self.get_year()\n    month = self.get_month()\n    day = self.get_day()\n    date = _date_from_string(year, self.get_year_format(),\n                             month, self.get_month_format(),\n                             day, self.get_day_format())\n    # Use a custom queryset if provided\n    qs = self.get_queryset() if queryset is None else queryset\n    if not self.get_allow_future() and date > datetime.date.today():\n        raise Http404(_(\n            \"Future %(verbose_name_plural)s not available because \"\n            \"%(class_name)s.allow_future is False.\"\n        ) % {\n            'verbose_name_plural': qs.model._meta.verbose_name_plural,\n            'class_name': self.__class__.__name__,\n        })\n    # Filter down a queryset from self.queryset using the date from the\n    # URL. This'll get passed as the queryset to DetailView.get_object,\n    # which'll handle the 404\n    lookup_kwargs = self._make_single_date_lookup(date)\n    qs = qs.filter(**lookup_kwargs)\n    return super(BaseDetailView, self).get_object(queryset=qs)\n",
  "kwargs": "self, queryset=None",
  "line_number": 644
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_ordering",
  "docstring": "Returns the field or fields to use for ordering the queryset; uses the\ndate field by default.",
  "code": "def get_ordering(self):\n    \"\"\"\n    Returns the field or fields to use for ordering the queryset; uses the\n    date field by default.\n    \"\"\"\n    return '-%s' % self.get_date_field() if self.ordering is None else self.ordering\n",
  "kwargs": "self",
  "line_number": 351
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_ordering",
  "docstring": "Return the field or fields to use for ordering the queryset.",
  "code": "def get_ordering(self):\n    \"\"\"\n    Return the field or fields to use for ordering the queryset.\n    \"\"\"\n    return self.ordering\n",
  "kwargs": "self",
  "line_number": 55
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_paginate_by",
  "docstring": "Get the number of items to paginate by, or ``None`` for no pagination.",
  "code": "def get_paginate_by(self, queryset):\n    \"\"\"\n    Get the number of items to paginate by, or ``None`` for no pagination.\n    \"\"\"\n    return self.paginate_by\n",
  "kwargs": "self, queryset",
  "line_number": 86
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_paginate_orphans",
  "docstring": "Returns the maximum number of orphans extend the last page by when\npaginating.",
  "code": "def get_paginate_orphans(self):\n    \"\"\"\n    Returns the maximum number of orphans extend the last page by when\n    paginating.\n    \"\"\"\n    return self.paginate_orphans\n",
  "kwargs": "self",
  "line_number": 101
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_paginator",
  "docstring": "Return an instance of the paginator for this view.",
  "code": "def get_paginator(self, queryset, per_page, orphans=0,\n                  allow_empty_first_page=True, **kwargs):\n    \"\"\"\n    Return an instance of the paginator for this view.\n    \"\"\"\n    return self.paginator_class(\n        queryset, per_page, orphans=orphans,\n        allow_empty_first_page=allow_empty_first_page, **kwargs)\n",
  "kwargs": "self, queryset, per_page, orphans=0, allow_empty_first_page=True, **kwargs",
  "line_number": 92
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "get_permission_denied_message",
  "docstring": "Override this method to override the permission_denied_message attribute.",
  "code": "def get_permission_denied_message(self):\n    \"\"\"\n    Override this method to override the permission_denied_message attribute.\n    \"\"\"\n    return self.permission_denied_message\n",
  "kwargs": "self",
  "line_number": 31
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "PermissionRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "get_permission_required",
  "docstring": "Override this method to override the permission_required attribute.\nMust return an iterable.",
  "code": "def get_permission_required(self):\n    \"\"\"\n    Override this method to override the permission_required attribute.\n    Must return an iterable.\n    \"\"\"\n    if self.permission_required is None:\n        raise ImproperlyConfigured(\n            '{0} is missing the permission_required attribute. Define {0}.permission_required, or override '\n            '{0}.get_permission_required().'.format(self.__class__.__name__)\n        )\n    if isinstance(self.permission_required, six.string_types):\n        perms = (self.permission_required, )\n    else:\n        perms = self.permission_required\n    return perms\n",
  "kwargs": "self",
  "line_number": 66
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_prefix",
  "docstring": "Returns the prefix to use for forms on this view",
  "code": "def get_prefix(self):\n    \"\"\"\n    Returns the prefix to use for forms on this view\n    \"\"\"\n    return self.prefix\n",
  "kwargs": "self",
  "line_number": 27
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_previous_day",
  "docstring": "Get the previous valid day.",
  "code": "def get_previous_day(self, date):\n    \"\"\"\n    Get the previous valid day.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='day')\n",
  "kwargs": "self, date",
  "line_number": 172
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_previous_month",
  "docstring": "Get the previous valid month.",
  "code": "def get_previous_month(self, date):\n    \"\"\"\n    Get the previous valid month.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='month')\n",
  "kwargs": "self, date",
  "line_number": 113
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_previous_week",
  "docstring": "Get the previous valid week.",
  "code": "def get_previous_week(self, date):\n    \"\"\"\n    Get the previous valid week.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='week')\n",
  "kwargs": "self, date",
  "line_number": 228
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_previous_year",
  "docstring": "Get the previous valid year.",
  "code": "def get_previous_year(self, date):\n    \"\"\"\n    Get the previous valid year.\n    \"\"\"\n    return _get_next_prev(self, date, is_previous=True, period='year')\n",
  "kwargs": "self, date",
  "line_number": 57
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_queryset",
  "docstring": "Return the `QuerySet` that will be used to look up the object.\n\nNote that this method is called by the default implementation of\n`get_object` and may not be called if `get_object` is overridden.",
  "code": "def get_queryset(self):\n    \"\"\"\n    Return the `QuerySet` that will be used to look up the object.\n    Note that this method is called by the default implementation of\n    `get_object` and may not be called if `get_object` is overridden.\n    \"\"\"\n    if self.queryset is None:\n        if self.model:\n            return self.model._default_manager.all()\n        else:\n            raise ImproperlyConfigured(\n                \"%(cls)s is missing a QuerySet. Define \"\n                \"%(cls)s.model, %(cls)s.queryset, or override \"\n                \"%(cls)s.get_queryset().\" % {\n                    'cls': self.__class__.__name__\n                }\n            )\n    return self.queryset.all()\n",
  "kwargs": "self",
  "line_number": 59
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_queryset",
  "docstring": "Return the list of items for this view.\n\nThe return value must be an iterable and may be an instance of\n`QuerySet` in which case `QuerySet` specific behavior will be enabled.",
  "code": "def get_queryset(self):\n    \"\"\"\n    Return the list of items for this view.\n    The return value must be an iterable and may be an instance of\n    `QuerySet` in which case `QuerySet` specific behavior will be enabled.\n    \"\"\"\n    if self.queryset is not None:\n        queryset = self.queryset\n        if isinstance(queryset, QuerySet):\n            queryset = queryset.all()\n    elif self.model is not None:\n        queryset = self.model._default_manager.all()\n    else:\n        raise ImproperlyConfigured(\n            \"%(cls)s is missing a QuerySet. Define \"\n            \"%(cls)s.model, %(cls)s.queryset, or override \"\n            \"%(cls)s.get_queryset().\" % {\n                'cls': self.__class__.__name__\n            }\n        )\n    ordering = self.get_ordering()\n    if ordering:\n        if isinstance(ordering, six.string_types):\n            ordering = (ordering,)\n        queryset = queryset.order_by(*ordering)\n    return queryset\n",
  "kwargs": "self",
  "line_number": 26
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "get_redirect_field_name",
  "docstring": "Override this method to override the redirect_field_name attribute.",
  "code": "def get_redirect_field_name(self):\n    \"\"\"\n    Override this method to override the redirect_field_name attribute.\n    \"\"\"\n    return self.redirect_field_name\n",
  "kwargs": "self",
  "line_number": 37
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "get_redirect_url",
  "docstring": "Return the URL redirect to. Keyword arguments from the\nURL pattern match generating the redirect request\nare provided as kwargs to this method.",
  "code": "def get_redirect_url(self, *args, **kwargs):\n    \"\"\"\n    Return the URL redirect to. Keyword arguments from the\n    URL pattern match generating the redirect request\n    are provided as kwargs to this method.\n    \"\"\"\n    if self.url:\n        url = self.url % kwargs\n    elif self.pattern_name:\n        try:\n            url = reverse(self.pattern_name, args=args, kwargs=kwargs)\n        except NoReverseMatch:\n            return None\n    else:\n        return None\n    args = self.request.META.get('QUERY_STRING', '')\n    if args and self.query_string:\n        url = \"%s?%s\" % (url, args)\n    return url\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 168
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_slug_field",
  "docstring": "Get the name of a slug field to be used to look up by slug.",
  "code": "def get_slug_field(self):\n    \"\"\"\n    Get the name of a slug field to be used to look up by slug.\n    \"\"\"\n    return self.slug_field\n",
  "kwargs": "self",
  "line_number": 79
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_success_url",
  "docstring": "Returns the supplied success URL.",
  "code": "def get_success_url(self):\n    \"\"\"\n    Returns the supplied success URL.\n    \"\"\"\n    if self.success_url:\n        # Forcing possible reverse_lazy evaluation\n        url = force_text(self.success_url)\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n    return url\n",
  "kwargs": "self",
  "line_number": 63
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_success_url",
  "docstring": "",
  "code": "def get_success_url(self):\n    if self.success_url:\n        return self.success_url.format(**self.object.__dict__)\n    else:\n        raise ImproperlyConfigured(\n            \"No URL to redirect to. Provide a success_url.\")\n",
  "kwargs": "self",
  "line_number": 271
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "get_success_url",
  "docstring": "Returns the supplied URL.",
  "code": "def get_success_url(self):\n    \"\"\"\n    Returns the supplied URL.\n    \"\"\"\n    if self.success_url:\n        url = self.success_url.format(**self.object.__dict__)\n    else:\n        try:\n            url = self.object.get_absolute_url()\n        except AttributeError:\n            raise ImproperlyConfigured(\n                \"No URL to redirect to.  Either provide a url or define\"\n                \" a get_absolute_url method on the Model.\")\n    return url\n",
  "kwargs": "self",
  "line_number": 143
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.",
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    try:\n        names = super(MultipleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n    # If the list is a queryset, we'll invent a template name based on the\n    # app and model name. This name gets put at the end of the template\n    # name list so that user-supplied names override the automatically-\n    # generated ones.\n    if hasattr(self.object_list, 'model'):\n        opts = self.object_list.model._meta\n        names.append(\"%s/%s%s.html\" % (opts.app_label, opts.model_name, self.template_name_suffix))\n    return names\n",
  "kwargs": "self",
  "line_number": 184
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "get_template_names",
  "docstring": "Returns a list of template names to be used for the request. Must return\na list. May not be called if render_to_response is overridden.",
  "code": "def get_template_names(self):\n    \"\"\"\n    Returns a list of template names to be used for the request. Must return\n    a list. May not be called if render_to_response is overridden.\n    \"\"\"\n    if self.template_name is None:\n        raise ImproperlyConfigured(\n            \"TemplateResponseMixin requires either a definition of \"\n            \"'template_name' or an implementation of 'get_template_names()'\")\n    else:\n        return [self.template_name]\n",
  "kwargs": "self",
  "line_number": 136
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "name": "get_template_names",
  "docstring": "Return a list of template names to be used for the request. May not be\ncalled if render_to_response is overridden. Returns the following list:\n\n* the value of ``template_name`` on the view (if provided)\n* the contents of the ``template_name_field`` field on the\n  object instance that the view is operating upon (if available)\n* ``<app_label>/<model_name><template_name_suffix>.html``",
  "code": "def get_template_names(self):\n    \"\"\"\n    Return a list of template names to be used for the request. May not be\n    called if render_to_response is overridden. Returns the following list:\n    * the value of ``template_name`` on the view (if provided)\n    * the contents of the ``template_name_field`` field on the\n      object instance that the view is operating upon (if available)\n    * ``<app_label>/<model_name><template_name_suffix>.html``\n    \"\"\"\n    try:\n        names = super(SingleObjectTemplateResponseMixin, self).get_template_names()\n    except ImproperlyConfigured:\n        # If template_name isn't specified, it's not a problem --\n        # we just start with an empty list.\n        names = []\n        # If self.template_name_field is set, grab the value of the field\n        # of that name from the object; this is the most specific template\n        # name, if given.\n        if self.object and self.template_name_field:\n            name = getattr(self.object, self.template_name_field, None)\n            if name:\n                names.insert(0, name)\n        # The least-specific option is the default <app>/<model>_detail.html;\n        # only use this if the object in question is a model.\n        if isinstance(self.object, models.Model):\n            object_meta = self.object._meta\n            names.append(\"%s/%s%s.html\" % (\n                object_meta.app_label,\n                object_meta.model_name,\n                self.template_name_suffix\n            ))\n        elif hasattr(self, 'model') and self.model is not None and issubclass(self.model, models.Model):\n            names.append(\"%s/%s%s.html\" % (\n                self.model._meta.app_label,\n                self.model._meta.model_name,\n                self.template_name_suffix\n            ))\n        # If we still haven't managed to find any template names, we should\n        # re-raise the ImproperlyConfigured to alert the user.\n        if not names:\n            raise\n    return names\n",
  "kwargs": "self",
  "line_number": 124
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "UserPassesTestMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "get_test_func",
  "docstring": "Override this method to use a different test_func method.",
  "code": "def get_test_func(self):\n    \"\"\"\n    Override this method to use a different test_func method.\n    \"\"\"\n    return self.test_func\n",
  "kwargs": "self",
  "line_number": 106
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_week",
  "docstring": "Return the week for which this view should display data",
  "code": "def get_week(self):\n    \"\"\"\n    Return the week for which this view should display data\n    \"\"\"\n    week = self.week\n    if week is None:\n        try:\n            week = self.kwargs['week']\n        except KeyError:\n            try:\n                week = self.request.GET['week']\n            except KeyError:\n                raise Http404(_(\"No week specified\"))\n    return week\n",
  "kwargs": "self",
  "line_number": 207
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_get_weekday",
  "docstring": "Return the weekday for a given date.\n\nThe first day according to the week format is 0 and the last day is 6.",
  "code": "def _get_weekday(self, date):\n    \"\"\"\n    Return the weekday for a given date.\n    The first day according to the week format is 0 and the last day is 6.\n    \"\"\"\n    week_format = self.get_week_format()\n    if week_format == '%W':                 # week starts on Monday\n        return date.weekday()\n    elif week_format == '%U':               # week starts on Sunday\n        return (date.weekday() + 1) % 7\n    else:\n        raise ValueError(\"unknown week format: %s\" % week_format)\n",
  "kwargs": "self, date",
  "line_number": 248
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_week_format",
  "docstring": "Get a week format string in strptime syntax to be used to parse the\nweek from url variables.",
  "code": "def get_week_format(self):\n    \"\"\"\n    Get a week format string in strptime syntax to be used to parse the\n    week from url variables.\n    \"\"\"\n    return self.week_format\n",
  "kwargs": "self",
  "line_number": 200
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_year",
  "docstring": "Return the year for which this view should display data.",
  "code": "def get_year(self):\n    \"\"\"\n    Return the year for which this view should display data.\n    \"\"\"\n    year = self.year\n    if year is None:\n        try:\n            year = self.kwargs['year']\n        except KeyError:\n            try:\n                year = self.request.GET['year']\n            except KeyError:\n                raise Http404(_(\"No year specified\"))\n    return year\n",
  "kwargs": "self",
  "line_number": 36
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "get_year_format",
  "docstring": "Get a year format string in strptime syntax to be used to parse the\nyear from url variables.",
  "code": "def get_year_format(self):\n    \"\"\"\n    Get a year format string in strptime syntax to be used to parse the\n    year from url variables.\n    \"\"\"\n    return self.year_format\n",
  "kwargs": "self",
  "line_number": 29
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "handle_no_permission",
  "docstring": "",
  "code": "def handle_no_permission(self):\n    if self.raise_exception:\n        raise PermissionDenied(self.get_permission_denied_message())\n    return redirect_to_login(self.request.get_full_path(), self.get_login_url(), self.get_redirect_field_name())\n",
  "kwargs": "self",
  "line_number": 43
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "PermissionRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "has_permission",
  "docstring": "Override this method to customize the way permissions are checked.",
  "code": "def has_permission(self):\n    \"\"\"\n    Override this method to customize the way permissions are checked.\n    \"\"\"\n    perms = self.get_permission_required()\n    return self.request.user.has_perms(perms)\n",
  "kwargs": "self",
  "line_number": 82
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "head",
  "docstring": "",
  "code": "def head(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 203
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "http_method_not_allowed",
  "docstring": "",
  "code": "def http_method_not_allowed(self, request, *args, **kwargs):\n    logger.warning(\n        'Method Not Allowed (%s): %s', request.method, request.path,\n        extra={'status_code': 405, 'request': request}\n    )\n    return http.HttpResponseNotAllowed(self._allowed_methods())\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 90
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "__init__",
  "docstring": "Constructor. Called in the URLconf; can contain helpful extra\nkeyword arguments, and other things.",
  "code": "def __init__(self, **kwargs):\n    \"\"\"\n    Constructor. Called in the URLconf; can contain helpful extra\n    keyword arguments, and other things.\n    \"\"\"\n    # Go through keyword arguments, and either save their values to our\n    # instance, or raise an error.\n    for key, value in six.iteritems(kwargs):\n        setattr(self, key, value)\n",
  "kwargs": "self, **kwargs",
  "line_number": 36
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_make_date_lookup_arg",
  "docstring": "Convert a date into a datetime when the date field is a DateTimeField.\n\nWhen time zone support is enabled, `date` is assumed to be in the\ncurrent time zone, so that displayed items are consistent with the URL.",
  "code": "def _make_date_lookup_arg(self, value):\n    \"\"\"\n    Convert a date into a datetime when the date field is a DateTimeField.\n    When time zone support is enabled, `date` is assumed to be in the\n    current time zone, so that displayed items are consistent with the URL.\n    \"\"\"\n    if self.uses_datetime_field:\n        value = datetime.datetime.combine(value, datetime.time.min)\n        if settings.USE_TZ:\n            value = timezone.make_aware(value, timezone.get_current_timezone())\n    return value\n",
  "kwargs": "self, value",
  "line_number": 298
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "name": "_make_single_date_lookup",
  "docstring": "Get the lookup kwargs for filtering on a single date.\n\nIf the date field is a DateTimeField, we can't just filter on\ndate_field=date because that doesn't take the time into account.",
  "code": "def _make_single_date_lookup(self, date):\n    \"\"\"\n    Get the lookup kwargs for filtering on a single date.\n    If the date field is a DateTimeField, we can't just filter on\n    date_field=date because that doesn't take the time into account.\n    \"\"\"\n    date_field = self.get_date_field()\n    if self.uses_datetime_field:\n        since = self._make_date_lookup_arg(date)\n        until = self._make_date_lookup_arg(date + datetime.timedelta(days=1))\n        return {\n            '%s__gte' % date_field: since,\n            '%s__lt' % date_field: until,\n        }\n    else:\n        # Skip self._make_date_lookup_arg, it's a no-op in this branch.\n        return {date_field: date}\n",
  "kwargs": "self, date",
  "line_number": 311
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "options",
  "docstring": "Handles responding to requests for the OPTIONS HTTP verb.",
  "code": "def options(self, request, *args, **kwargs):\n    \"\"\"\n    Handles responding to requests for the OPTIONS HTTP verb.\n    \"\"\"\n    response = http.HttpResponse()\n    response['Allow'] = ', '.join(self._allowed_methods())\n    response['Content-Length'] = '0'\n    return response\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 97
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "options",
  "docstring": "",
  "code": "def options(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 209
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "name": "paginate_queryset",
  "docstring": "Paginate the queryset, if needed.",
  "code": "def paginate_queryset(self, queryset, page_size):\n    \"\"\"\n    Paginate the queryset, if needed.\n    \"\"\"\n    paginator = self.get_paginator(\n        queryset, page_size, orphans=self.get_paginate_orphans(),\n        allow_empty_first_page=self.get_allow_empty())\n    page_kwarg = self.page_kwarg\n    page = self.kwargs.get(page_kwarg) or self.request.GET.get(page_kwarg) or 1\n    try:\n        page_number = int(page)\n    except ValueError:\n        if page == 'last':\n            page_number = paginator.num_pages\n        else:\n            raise Http404(_(\"Page is not 'last', nor can it be converted to an int.\"))\n    try:\n        page = paginator.page(page_number)\n        return (paginator, page, page.object_list, page.has_other_pages())\n    except InvalidPage as e:\n        raise Http404(_('Invalid page (%(page_number)s): %(message)s') % {\n            'page_number': page_number,\n            'message': str(e)\n        })\n",
  "kwargs": "self, queryset, page_size",
  "line_number": 61
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "patch",
  "docstring": "",
  "code": "def patch(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 218
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 206
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    return self.delete(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 268
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "post",
  "docstring": "Handles POST requests, instantiating a form instance with the passed\nPOST variables and then checked for validity.",
  "code": "def post(self, request, *args, **kwargs):\n    \"\"\"\n    Handles POST requests, instantiating a form instance with the passed\n    POST variables and then checked for validity.\n    \"\"\"\n    form = self.get_form()\n    if form.is_valid():\n        return self.form_valid(form)\n    else:\n        return self.form_invalid(form)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 176
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    self.object = self.get_object()\n    return super(BaseUpdateView, self).post(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 238
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "post",
  "docstring": "",
  "code": "def post(self, request, *args, **kwargs):\n    self.object = None\n    return super(BaseCreateView, self).post(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 215
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "name": "put",
  "docstring": "",
  "code": "def put(self, *args, **kwargs):\n    return self.post(*args, **kwargs)\n",
  "kwargs": "self, *args, **kwargs",
  "line_number": 189
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "put",
  "docstring": "",
  "code": "def put(self, request, *args, **kwargs):\n    return self.get(request, *args, **kwargs)\n",
  "kwargs": "self, request, *args, **kwargs",
  "line_number": 215
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "name": "render_to_response",
  "docstring": "Returns a response, using the `response_class` for this\nview, with a template rendered with the given context.\n\nIf any keyword arguments are provided, they will be\npassed to the constructor of the response class.",
  "code": "def render_to_response(self, context, **response_kwargs):\n    \"\"\"\n    Returns a response, using the `response_class` for this\n    view, with a template rendered with the given context.\n    If any keyword arguments are provided, they will be\n    passed to the constructor of the response class.\n    \"\"\"\n    response_kwargs.setdefault('content_type', self.content_type)\n    return self.response_class(\n        request=self.request,\n        template=self.get_template_names(),\n        context=context,\n        using=self.template_engine,\n        **response_kwargs\n    )\n",
  "kwargs": "self, context, **response_kwargs",
  "line_number": 119
 }
},
{
 "model": "cbv.method",
 "pk": null,
 "fields": {
  "klass": [
   "UserPassesTestMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "name": "test_func",
  "docstring": "",
  "code": "def test_func(self):\n    raise NotImplementedError(\n        '{0} is missing the implementation of the test_func() method.'.format(self.__class__.__name__)\n    )\n",
  "kwargs": "self",
  "line_number": 101
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "child": [
   "PermissionRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "child": [
   "LoginRequiredMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DeletionMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "YearMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "RedirectView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "FormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "MultipleObjectMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "SingleObjectTemplateResponseMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "TemplateResponseMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "MultipleObjectTemplateResponseMixin",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "AccessMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "child": [
   "UserPassesTestMixin",
   "django.contrib.auth.mixins",
   "Django",
   "1.10"
  ],
  "order": 0
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "MonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "DateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "ArchiveIndexView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseYearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "YearArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "WeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseTodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "TodayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "SingleObjectMixin",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "ModelFormMixin",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "DayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "DetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ContextMixin",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "WeekMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "child": [
   "ListView",
   "django.views.generic.list",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "ProcessFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "MonthMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseUpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "UpdateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseFormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "FormView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "DeleteView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseCreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "child": [
   "CreateView",
   "django.views.generic.edit",
   "Django",
   "1.10"
  ],
  "order": 1
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseWeekArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "TemplateView",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseMonthArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "View",
   "django.views.generic.base",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DayMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 2
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDateListView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDayArchiveView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 3
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "DateMixin",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 3
 }
},
{
 "model": "cbv.inheritance",
 "pk": null,
 "fields": {
  "parent": [
   "BaseDetailView",
   "django.views.generic.detail",
   "Django",
   "1.10"
  ],
  "child": [
   "BaseDateDetailView",
   "django.views.generic.dates",
   "Django",
   "1.10"
  ],
  "order": 4
 }
}
]
